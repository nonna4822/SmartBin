
Bin.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000047c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000408  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  0000047c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000047c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000004ac  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  000004ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000857  00000000  00000000  00000514  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006f1  00000000  00000000  00000d6b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000363  00000000  00000000  0000145c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000048  00000000  00000000  000017c0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003d7  00000000  00000000  00001808  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000143  00000000  00000000  00001bdf  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  00001d22  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 48 00 	jmp	0x90	; 0x90 <__vector_13>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a2 30       	cpi	r26, 0x02	; 2
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 5f 00 	call	0xbe	; 0xbe <main>
  88:	0c 94 02 02 	jmp	0x404	; 0x404 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <__vector_13>:
#define Trigger_pin PORTB1 /* Trigger pin */

int TimerOverflow = 0;

ISR(TIMER1_OVF_vect)
{
  90:	1f 92       	push	r1
  92:	0f 92       	push	r0
  94:	0f b6       	in	r0, 0x3f	; 63
  96:	0f 92       	push	r0
  98:	11 24       	eor	r1, r1
  9a:	8f 93       	push	r24
  9c:	9f 93       	push	r25
	TimerOverflow++; /* Increment Timer Overflow count */
  9e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  a2:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
  a6:	01 96       	adiw	r24, 0x01	; 1
  a8:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
  ac:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
}
  b0:	9f 91       	pop	r25
  b2:	8f 91       	pop	r24
  b4:	0f 90       	pop	r0
  b6:	0f be       	out	0x3f, r0	; 63
  b8:	0f 90       	pop	r0
  ba:	1f 90       	pop	r1
  bc:	18 95       	reti

000000be <main>:
{
	/*ultrasonic */
	double distance;
	long count;
	
	DDRB |= (1<<PORTB1);
  be:	21 9a       	sbi	0x04, 1	; 4
	PORTB |= (1<<PORTB0);
  c0:	28 9a       	sbi	0x05, 0	; 5

	sei();                /* Enable global interrupt */
  c2:	78 94       	sei
	TIMSK1 = (1 << TOIE1); /* Enable Timer1 overflow interrupts */
  c4:	81 e0       	ldi	r24, 0x01	; 1
  c6:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
	TCCR1A = 0;           /* Set all bit to zero Normal operation */
  ca:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
	
	/*servo-motor */
	DDRC |= 0x00;
  ce:	87 b1       	in	r24, 0x07	; 7
  d0:	87 b9       	out	0x07, r24	; 7
	DDRD |= (1<<PORTD6);	/* Make OC0A pin as output */
  d2:	56 9a       	sbi	0x0a, 6	; 10
	TCNT0 = 0;		/* Set timer0 count zero */
  d4:	16 bc       	out	0x26, r1	; 38
	TCCR0A|=(1<<COM0A1)|(1<<WGM01)|(1<<WGM00);        //NON Inverted PWM
  d6:	84 b5       	in	r24, 0x24	; 36
  d8:	83 68       	ori	r24, 0x83	; 131
  da:	84 bd       	out	0x24, r24	; 36
	TCCR0B|=(1<<CS01); //PRESCALER=256 MODE 14(FAST PWM)
  dc:	85 b5       	in	r24, 0x25	; 37
  de:	82 60       	ori	r24, 0x02	; 2
  e0:	85 bd       	out	0x25, r24	; 37
		/* Give 10us trigger pulse on trig. pin to HC-SR04 */
		PORTB |= (1 << Trigger_pin);
		_delay_us(10);
		PORTB &= (~(1 << Trigger_pin));

		TCNT1 = 0;         /* Clear Timer counter */
  e2:	04 e8       	ldi	r16, 0x84	; 132
  e4:	10 e0       	ldi	r17, 0x00	; 0
		TCCR1B = 0x41;     /* Capture on rising edge, No prescaler*/
  e6:	c1 e8       	ldi	r28, 0x81	; 129
  e8:	d0 e0       	ldi	r29, 0x00	; 0
  ea:	0f 2e       	mov	r0, r31
  ec:	f1 e4       	ldi	r31, 0x41	; 65
  ee:	bf 2e       	mov	r11, r31
  f0:	f0 2d       	mov	r31, r0
		TIFR1 = 1 << ICF1; /* Clear ICP flag (Input Capture flag) */
  f2:	68 94       	set
  f4:	cc 24       	eor	r12, r12
  f6:	c5 f8       	bld	r12, 5
		TIFR1 = 1 << TOV1; /* Clear Timer Overflow flag */
  f8:	dd 24       	eor	r13, r13
  fa:	d3 94       	inc	r13
		TIFR1 = 1 << ICF1; /* Clear ICP flag (Input Capture flag) */
		TIFR1 = 1 << TOV1; /* Clear Timer Overflow flag */
		TimerOverflow = 0; /* Clear Timer overflow count */

		while ((TIFR1 & (1 << ICF1)) == 0);  /* Wait for falling edge */
		count = ICR1 + (65535 * TimerOverflow); /* Take count */
  fc:	0f 2e       	mov	r0, r31
  fe:	f6 e8       	ldi	r31, 0x86	; 134
 100:	ef 2e       	mov	r14, r31
 102:	f1 2c       	mov	r15, r1
 104:	f0 2d       	mov	r31, r0
			_delay_ms(1500);
		}else{
			PORTB &= ~(1<<PB2);
			OCR0A = 0;	//0
			_delay_ms(1500);
			OCR0A = 175; //90
 106:	0f 2e       	mov	r0, r31
 108:	ff ea       	ldi	r31, 0xAF	; 175
 10a:	af 2e       	mov	r10, r31
 10c:	f0 2d       	mov	r31, r0
	
	while (1)
	{
		/* ultrasonic */
		int i=0;
		DDRB |= (1<<PB2);
 10e:	22 9a       	sbi	0x04, 2	; 4
		
		/* Give 10us trigger pulse on trig. pin to HC-SR04 */
		PORTB |= (1 << Trigger_pin);
 110:	29 9a       	sbi	0x05, 1	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 112:	23 e0       	ldi	r18, 0x03	; 3
 114:	2a 95       	dec	r18
 116:	f1 f7       	brne	.-4      	; 0x114 <main+0x56>
 118:	00 00       	nop
		_delay_us(10);
		PORTB &= (~(1 << Trigger_pin));
 11a:	29 98       	cbi	0x05, 1	; 5

		TCNT1 = 0;         /* Clear Timer counter */
 11c:	f8 01       	movw	r30, r16
 11e:	11 82       	std	Z+1, r1	; 0x01
 120:	10 82       	st	Z, r1
		TCCR1B = 0x41;     /* Capture on rising edge, No prescaler*/
 122:	b8 82       	st	Y, r11
		TIFR1 = 1 << ICF1; /* Clear ICP flag (Input Capture flag) */
 124:	c6 ba       	out	0x16, r12	; 22
		TIFR1 = 1 << TOV1; /* Clear Timer Overflow flag */
 126:	d6 ba       	out	0x16, r13	; 22

		/*Calculate width of Echo by Input Capture (ICP) */

		while ((TIFR1 & (1 << ICF1)) == 0);              /* Wait for rising edge */
 128:	b5 9b       	sbis	0x16, 5	; 22
 12a:	fe cf       	rjmp	.-4      	; 0x128 <main+0x6a>
		TCNT1 = 0;         /* Clear Timer counter */
 12c:	f8 01       	movw	r30, r16
 12e:	11 82       	std	Z+1, r1	; 0x01
 130:	10 82       	st	Z, r1
		TCCR1B = 0x01;     /* Capture on falling edge, No prescaler */
 132:	d8 82       	st	Y, r13
		TIFR1 = 1 << ICF1; /* Clear ICP flag (Input Capture flag) */
 134:	c6 ba       	out	0x16, r12	; 22
		TIFR1 = 1 << TOV1; /* Clear Timer Overflow flag */
 136:	d6 ba       	out	0x16, r13	; 22
		TimerOverflow = 0; /* Clear Timer overflow count */
 138:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <_edata+0x1>
 13c:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>

		while ((TIFR1 & (1 << ICF1)) == 0);  /* Wait for falling edge */
 140:	b5 9b       	sbis	0x16, 5	; 22
 142:	fe cf       	rjmp	.-4      	; 0x140 <main+0x82>
		count = ICR1 + (65535 * TimerOverflow); /* Take count */
 144:	f7 01       	movw	r30, r14
 146:	60 81       	ld	r22, Z
 148:	71 81       	ldd	r23, Z+1	; 0x01
		/* 8MHz Timer freq, sound speed =343 m/s */
		distance = (double)count / 466.47;
		
		if(distance < 1){
 14a:	80 e0       	ldi	r24, 0x00	; 0
 14c:	90 e0       	ldi	r25, 0x00	; 0
 14e:	0e 94 52 01 	call	0x2a4	; 0x2a4 <__floatsisf>
 152:	29 e2       	ldi	r18, 0x29	; 41
 154:	3c e3       	ldi	r19, 0x3C	; 60
 156:	49 ee       	ldi	r20, 0xE9	; 233
 158:	53 e4       	ldi	r21, 0x43	; 67
 15a:	0e 94 de 00 	call	0x1bc	; 0x1bc <__divsf3>
 15e:	20 e0       	ldi	r18, 0x00	; 0
 160:	30 e0       	ldi	r19, 0x00	; 0
 162:	40 e8       	ldi	r20, 0x80	; 128
 164:	5f e3       	ldi	r21, 0x3F	; 63
 166:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <__cmpsf2>
 16a:	88 23       	and	r24, r24
 16c:	64 f4       	brge	.+24     	; 0x186 <main+0xc8>
			PORTB |= (1<<PB2);
 16e:	2a 9a       	sbi	0x05, 2	; 5
			OCR0A = 0;
 170:	17 bc       	out	0x27, r1	; 39
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 172:	ff ed       	ldi	r31, 0xDF	; 223
 174:	23 e9       	ldi	r18, 0x93	; 147
 176:	84 e0       	ldi	r24, 0x04	; 4
 178:	f1 50       	subi	r31, 0x01	; 1
 17a:	20 40       	sbci	r18, 0x00	; 0
 17c:	80 40       	sbci	r24, 0x00	; 0
 17e:	e1 f7       	brne	.-8      	; 0x178 <main+0xba>
 180:	00 c0       	rjmp	.+0      	; 0x182 <main+0xc4>
 182:	00 00       	nop
 184:	c4 cf       	rjmp	.-120    	; 0x10e <main+0x50>
			_delay_ms(1500);
		}else{
			PORTB &= ~(1<<PB2);
 186:	2a 98       	cbi	0x05, 2	; 5
			OCR0A = 0;	//0
 188:	17 bc       	out	0x27, r1	; 39
 18a:	9f ed       	ldi	r25, 0xDF	; 223
 18c:	e3 e9       	ldi	r30, 0x93	; 147
 18e:	f4 e0       	ldi	r31, 0x04	; 4
 190:	91 50       	subi	r25, 0x01	; 1
 192:	e0 40       	sbci	r30, 0x00	; 0
 194:	f0 40       	sbci	r31, 0x00	; 0
 196:	e1 f7       	brne	.-8      	; 0x190 <main+0xd2>
 198:	00 c0       	rjmp	.+0      	; 0x19a <main+0xdc>
 19a:	00 00       	nop
			_delay_ms(1500);
			OCR0A = 175; //90
 19c:	a7 bc       	out	0x27, r10	; 39
 19e:	2f ed       	ldi	r18, 0xDF	; 223
 1a0:	83 e9       	ldi	r24, 0x93	; 147
 1a2:	94 e0       	ldi	r25, 0x04	; 4
 1a4:	21 50       	subi	r18, 0x01	; 1
 1a6:	80 40       	sbci	r24, 0x00	; 0
 1a8:	90 40       	sbci	r25, 0x00	; 0
 1aa:	e1 f7       	brne	.-8      	; 0x1a4 <main+0xe6>
 1ac:	00 c0       	rjmp	.+0      	; 0x1ae <main+0xf0>
 1ae:	00 00       	nop
 1b0:	ae cf       	rjmp	.-164    	; 0x10e <main+0x50>

000001b2 <__cmpsf2>:
 1b2:	0e 94 8d 01 	call	0x31a	; 0x31a <__fp_cmp>
 1b6:	08 f4       	brcc	.+2      	; 0x1ba <__cmpsf2+0x8>
 1b8:	81 e0       	ldi	r24, 0x01	; 1
 1ba:	08 95       	ret

000001bc <__divsf3>:
 1bc:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <__divsf3x>
 1c0:	0c 94 c8 01 	jmp	0x390	; 0x390 <__fp_round>
 1c4:	0e 94 c1 01 	call	0x382	; 0x382 <__fp_pscB>
 1c8:	58 f0       	brcs	.+22     	; 0x1e0 <__divsf3+0x24>
 1ca:	0e 94 ba 01 	call	0x374	; 0x374 <__fp_pscA>
 1ce:	40 f0       	brcs	.+16     	; 0x1e0 <__divsf3+0x24>
 1d0:	29 f4       	brne	.+10     	; 0x1dc <__divsf3+0x20>
 1d2:	5f 3f       	cpi	r21, 0xFF	; 255
 1d4:	29 f0       	breq	.+10     	; 0x1e0 <__divsf3+0x24>
 1d6:	0c 94 b1 01 	jmp	0x362	; 0x362 <__fp_inf>
 1da:	51 11       	cpse	r21, r1
 1dc:	0c 94 fc 01 	jmp	0x3f8	; 0x3f8 <__fp_szero>
 1e0:	0c 94 b7 01 	jmp	0x36e	; 0x36e <__fp_nan>

000001e4 <__divsf3x>:
 1e4:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <__fp_split3>
 1e8:	68 f3       	brcs	.-38     	; 0x1c4 <__divsf3+0x8>

000001ea <__divsf3_pse>:
 1ea:	99 23       	and	r25, r25
 1ec:	b1 f3       	breq	.-20     	; 0x1da <__divsf3+0x1e>
 1ee:	55 23       	and	r21, r21
 1f0:	91 f3       	breq	.-28     	; 0x1d6 <__divsf3+0x1a>
 1f2:	95 1b       	sub	r25, r21
 1f4:	55 0b       	sbc	r21, r21
 1f6:	bb 27       	eor	r27, r27
 1f8:	aa 27       	eor	r26, r26
 1fa:	62 17       	cp	r22, r18
 1fc:	73 07       	cpc	r23, r19
 1fe:	84 07       	cpc	r24, r20
 200:	38 f0       	brcs	.+14     	; 0x210 <__divsf3_pse+0x26>
 202:	9f 5f       	subi	r25, 0xFF	; 255
 204:	5f 4f       	sbci	r21, 0xFF	; 255
 206:	22 0f       	add	r18, r18
 208:	33 1f       	adc	r19, r19
 20a:	44 1f       	adc	r20, r20
 20c:	aa 1f       	adc	r26, r26
 20e:	a9 f3       	breq	.-22     	; 0x1fa <__divsf3_pse+0x10>
 210:	35 d0       	rcall	.+106    	; 0x27c <__divsf3_pse+0x92>
 212:	0e 2e       	mov	r0, r30
 214:	3a f0       	brmi	.+14     	; 0x224 <__divsf3_pse+0x3a>
 216:	e0 e8       	ldi	r30, 0x80	; 128
 218:	32 d0       	rcall	.+100    	; 0x27e <__divsf3_pse+0x94>
 21a:	91 50       	subi	r25, 0x01	; 1
 21c:	50 40       	sbci	r21, 0x00	; 0
 21e:	e6 95       	lsr	r30
 220:	00 1c       	adc	r0, r0
 222:	ca f7       	brpl	.-14     	; 0x216 <__divsf3_pse+0x2c>
 224:	2b d0       	rcall	.+86     	; 0x27c <__divsf3_pse+0x92>
 226:	fe 2f       	mov	r31, r30
 228:	29 d0       	rcall	.+82     	; 0x27c <__divsf3_pse+0x92>
 22a:	66 0f       	add	r22, r22
 22c:	77 1f       	adc	r23, r23
 22e:	88 1f       	adc	r24, r24
 230:	bb 1f       	adc	r27, r27
 232:	26 17       	cp	r18, r22
 234:	37 07       	cpc	r19, r23
 236:	48 07       	cpc	r20, r24
 238:	ab 07       	cpc	r26, r27
 23a:	b0 e8       	ldi	r27, 0x80	; 128
 23c:	09 f0       	breq	.+2      	; 0x240 <__divsf3_pse+0x56>
 23e:	bb 0b       	sbc	r27, r27
 240:	80 2d       	mov	r24, r0
 242:	bf 01       	movw	r22, r30
 244:	ff 27       	eor	r31, r31
 246:	93 58       	subi	r25, 0x83	; 131
 248:	5f 4f       	sbci	r21, 0xFF	; 255
 24a:	3a f0       	brmi	.+14     	; 0x25a <__divsf3_pse+0x70>
 24c:	9e 3f       	cpi	r25, 0xFE	; 254
 24e:	51 05       	cpc	r21, r1
 250:	78 f0       	brcs	.+30     	; 0x270 <__divsf3_pse+0x86>
 252:	0c 94 b1 01 	jmp	0x362	; 0x362 <__fp_inf>
 256:	0c 94 fc 01 	jmp	0x3f8	; 0x3f8 <__fp_szero>
 25a:	5f 3f       	cpi	r21, 0xFF	; 255
 25c:	e4 f3       	brlt	.-8      	; 0x256 <__divsf3_pse+0x6c>
 25e:	98 3e       	cpi	r25, 0xE8	; 232
 260:	d4 f3       	brlt	.-12     	; 0x256 <__divsf3_pse+0x6c>
 262:	86 95       	lsr	r24
 264:	77 95       	ror	r23
 266:	67 95       	ror	r22
 268:	b7 95       	ror	r27
 26a:	f7 95       	ror	r31
 26c:	9f 5f       	subi	r25, 0xFF	; 255
 26e:	c9 f7       	brne	.-14     	; 0x262 <__divsf3_pse+0x78>
 270:	88 0f       	add	r24, r24
 272:	91 1d       	adc	r25, r1
 274:	96 95       	lsr	r25
 276:	87 95       	ror	r24
 278:	97 f9       	bld	r25, 7
 27a:	08 95       	ret
 27c:	e1 e0       	ldi	r30, 0x01	; 1
 27e:	66 0f       	add	r22, r22
 280:	77 1f       	adc	r23, r23
 282:	88 1f       	adc	r24, r24
 284:	bb 1f       	adc	r27, r27
 286:	62 17       	cp	r22, r18
 288:	73 07       	cpc	r23, r19
 28a:	84 07       	cpc	r24, r20
 28c:	ba 07       	cpc	r27, r26
 28e:	20 f0       	brcs	.+8      	; 0x298 <__divsf3_pse+0xae>
 290:	62 1b       	sub	r22, r18
 292:	73 0b       	sbc	r23, r19
 294:	84 0b       	sbc	r24, r20
 296:	ba 0b       	sbc	r27, r26
 298:	ee 1f       	adc	r30, r30
 29a:	88 f7       	brcc	.-30     	; 0x27e <__divsf3_pse+0x94>
 29c:	e0 95       	com	r30
 29e:	08 95       	ret

000002a0 <__floatunsisf>:
 2a0:	e8 94       	clt
 2a2:	09 c0       	rjmp	.+18     	; 0x2b6 <__floatsisf+0x12>

000002a4 <__floatsisf>:
 2a4:	97 fb       	bst	r25, 7
 2a6:	3e f4       	brtc	.+14     	; 0x2b6 <__floatsisf+0x12>
 2a8:	90 95       	com	r25
 2aa:	80 95       	com	r24
 2ac:	70 95       	com	r23
 2ae:	61 95       	neg	r22
 2b0:	7f 4f       	sbci	r23, 0xFF	; 255
 2b2:	8f 4f       	sbci	r24, 0xFF	; 255
 2b4:	9f 4f       	sbci	r25, 0xFF	; 255
 2b6:	99 23       	and	r25, r25
 2b8:	a9 f0       	breq	.+42     	; 0x2e4 <__floatsisf+0x40>
 2ba:	f9 2f       	mov	r31, r25
 2bc:	96 e9       	ldi	r25, 0x96	; 150
 2be:	bb 27       	eor	r27, r27
 2c0:	93 95       	inc	r25
 2c2:	f6 95       	lsr	r31
 2c4:	87 95       	ror	r24
 2c6:	77 95       	ror	r23
 2c8:	67 95       	ror	r22
 2ca:	b7 95       	ror	r27
 2cc:	f1 11       	cpse	r31, r1
 2ce:	f8 cf       	rjmp	.-16     	; 0x2c0 <__floatsisf+0x1c>
 2d0:	fa f4       	brpl	.+62     	; 0x310 <__floatsisf+0x6c>
 2d2:	bb 0f       	add	r27, r27
 2d4:	11 f4       	brne	.+4      	; 0x2da <__floatsisf+0x36>
 2d6:	60 ff       	sbrs	r22, 0
 2d8:	1b c0       	rjmp	.+54     	; 0x310 <__floatsisf+0x6c>
 2da:	6f 5f       	subi	r22, 0xFF	; 255
 2dc:	7f 4f       	sbci	r23, 0xFF	; 255
 2de:	8f 4f       	sbci	r24, 0xFF	; 255
 2e0:	9f 4f       	sbci	r25, 0xFF	; 255
 2e2:	16 c0       	rjmp	.+44     	; 0x310 <__floatsisf+0x6c>
 2e4:	88 23       	and	r24, r24
 2e6:	11 f0       	breq	.+4      	; 0x2ec <__floatsisf+0x48>
 2e8:	96 e9       	ldi	r25, 0x96	; 150
 2ea:	11 c0       	rjmp	.+34     	; 0x30e <__floatsisf+0x6a>
 2ec:	77 23       	and	r23, r23
 2ee:	21 f0       	breq	.+8      	; 0x2f8 <__floatsisf+0x54>
 2f0:	9e e8       	ldi	r25, 0x8E	; 142
 2f2:	87 2f       	mov	r24, r23
 2f4:	76 2f       	mov	r23, r22
 2f6:	05 c0       	rjmp	.+10     	; 0x302 <__floatsisf+0x5e>
 2f8:	66 23       	and	r22, r22
 2fa:	71 f0       	breq	.+28     	; 0x318 <__floatsisf+0x74>
 2fc:	96 e8       	ldi	r25, 0x86	; 134
 2fe:	86 2f       	mov	r24, r22
 300:	70 e0       	ldi	r23, 0x00	; 0
 302:	60 e0       	ldi	r22, 0x00	; 0
 304:	2a f0       	brmi	.+10     	; 0x310 <__floatsisf+0x6c>
 306:	9a 95       	dec	r25
 308:	66 0f       	add	r22, r22
 30a:	77 1f       	adc	r23, r23
 30c:	88 1f       	adc	r24, r24
 30e:	da f7       	brpl	.-10     	; 0x306 <__floatsisf+0x62>
 310:	88 0f       	add	r24, r24
 312:	96 95       	lsr	r25
 314:	87 95       	ror	r24
 316:	97 f9       	bld	r25, 7
 318:	08 95       	ret

0000031a <__fp_cmp>:
 31a:	99 0f       	add	r25, r25
 31c:	00 08       	sbc	r0, r0
 31e:	55 0f       	add	r21, r21
 320:	aa 0b       	sbc	r26, r26
 322:	e0 e8       	ldi	r30, 0x80	; 128
 324:	fe ef       	ldi	r31, 0xFE	; 254
 326:	16 16       	cp	r1, r22
 328:	17 06       	cpc	r1, r23
 32a:	e8 07       	cpc	r30, r24
 32c:	f9 07       	cpc	r31, r25
 32e:	c0 f0       	brcs	.+48     	; 0x360 <__fp_cmp+0x46>
 330:	12 16       	cp	r1, r18
 332:	13 06       	cpc	r1, r19
 334:	e4 07       	cpc	r30, r20
 336:	f5 07       	cpc	r31, r21
 338:	98 f0       	brcs	.+38     	; 0x360 <__fp_cmp+0x46>
 33a:	62 1b       	sub	r22, r18
 33c:	73 0b       	sbc	r23, r19
 33e:	84 0b       	sbc	r24, r20
 340:	95 0b       	sbc	r25, r21
 342:	39 f4       	brne	.+14     	; 0x352 <__fp_cmp+0x38>
 344:	0a 26       	eor	r0, r26
 346:	61 f0       	breq	.+24     	; 0x360 <__fp_cmp+0x46>
 348:	23 2b       	or	r18, r19
 34a:	24 2b       	or	r18, r20
 34c:	25 2b       	or	r18, r21
 34e:	21 f4       	brne	.+8      	; 0x358 <__fp_cmp+0x3e>
 350:	08 95       	ret
 352:	0a 26       	eor	r0, r26
 354:	09 f4       	brne	.+2      	; 0x358 <__fp_cmp+0x3e>
 356:	a1 40       	sbci	r26, 0x01	; 1
 358:	a6 95       	lsr	r26
 35a:	8f ef       	ldi	r24, 0xFF	; 255
 35c:	81 1d       	adc	r24, r1
 35e:	81 1d       	adc	r24, r1
 360:	08 95       	ret

00000362 <__fp_inf>:
 362:	97 f9       	bld	r25, 7
 364:	9f 67       	ori	r25, 0x7F	; 127
 366:	80 e8       	ldi	r24, 0x80	; 128
 368:	70 e0       	ldi	r23, 0x00	; 0
 36a:	60 e0       	ldi	r22, 0x00	; 0
 36c:	08 95       	ret

0000036e <__fp_nan>:
 36e:	9f ef       	ldi	r25, 0xFF	; 255
 370:	80 ec       	ldi	r24, 0xC0	; 192
 372:	08 95       	ret

00000374 <__fp_pscA>:
 374:	00 24       	eor	r0, r0
 376:	0a 94       	dec	r0
 378:	16 16       	cp	r1, r22
 37a:	17 06       	cpc	r1, r23
 37c:	18 06       	cpc	r1, r24
 37e:	09 06       	cpc	r0, r25
 380:	08 95       	ret

00000382 <__fp_pscB>:
 382:	00 24       	eor	r0, r0
 384:	0a 94       	dec	r0
 386:	12 16       	cp	r1, r18
 388:	13 06       	cpc	r1, r19
 38a:	14 06       	cpc	r1, r20
 38c:	05 06       	cpc	r0, r21
 38e:	08 95       	ret

00000390 <__fp_round>:
 390:	09 2e       	mov	r0, r25
 392:	03 94       	inc	r0
 394:	00 0c       	add	r0, r0
 396:	11 f4       	brne	.+4      	; 0x39c <__fp_round+0xc>
 398:	88 23       	and	r24, r24
 39a:	52 f0       	brmi	.+20     	; 0x3b0 <__fp_round+0x20>
 39c:	bb 0f       	add	r27, r27
 39e:	40 f4       	brcc	.+16     	; 0x3b0 <__fp_round+0x20>
 3a0:	bf 2b       	or	r27, r31
 3a2:	11 f4       	brne	.+4      	; 0x3a8 <__fp_round+0x18>
 3a4:	60 ff       	sbrs	r22, 0
 3a6:	04 c0       	rjmp	.+8      	; 0x3b0 <__fp_round+0x20>
 3a8:	6f 5f       	subi	r22, 0xFF	; 255
 3aa:	7f 4f       	sbci	r23, 0xFF	; 255
 3ac:	8f 4f       	sbci	r24, 0xFF	; 255
 3ae:	9f 4f       	sbci	r25, 0xFF	; 255
 3b0:	08 95       	ret

000003b2 <__fp_split3>:
 3b2:	57 fd       	sbrc	r21, 7
 3b4:	90 58       	subi	r25, 0x80	; 128
 3b6:	44 0f       	add	r20, r20
 3b8:	55 1f       	adc	r21, r21
 3ba:	59 f0       	breq	.+22     	; 0x3d2 <__fp_splitA+0x10>
 3bc:	5f 3f       	cpi	r21, 0xFF	; 255
 3be:	71 f0       	breq	.+28     	; 0x3dc <__fp_splitA+0x1a>
 3c0:	47 95       	ror	r20

000003c2 <__fp_splitA>:
 3c2:	88 0f       	add	r24, r24
 3c4:	97 fb       	bst	r25, 7
 3c6:	99 1f       	adc	r25, r25
 3c8:	61 f0       	breq	.+24     	; 0x3e2 <__fp_splitA+0x20>
 3ca:	9f 3f       	cpi	r25, 0xFF	; 255
 3cc:	79 f0       	breq	.+30     	; 0x3ec <__fp_splitA+0x2a>
 3ce:	87 95       	ror	r24
 3d0:	08 95       	ret
 3d2:	12 16       	cp	r1, r18
 3d4:	13 06       	cpc	r1, r19
 3d6:	14 06       	cpc	r1, r20
 3d8:	55 1f       	adc	r21, r21
 3da:	f2 cf       	rjmp	.-28     	; 0x3c0 <__fp_split3+0xe>
 3dc:	46 95       	lsr	r20
 3de:	f1 df       	rcall	.-30     	; 0x3c2 <__fp_splitA>
 3e0:	08 c0       	rjmp	.+16     	; 0x3f2 <__fp_splitA+0x30>
 3e2:	16 16       	cp	r1, r22
 3e4:	17 06       	cpc	r1, r23
 3e6:	18 06       	cpc	r1, r24
 3e8:	99 1f       	adc	r25, r25
 3ea:	f1 cf       	rjmp	.-30     	; 0x3ce <__fp_splitA+0xc>
 3ec:	86 95       	lsr	r24
 3ee:	71 05       	cpc	r23, r1
 3f0:	61 05       	cpc	r22, r1
 3f2:	08 94       	sec
 3f4:	08 95       	ret

000003f6 <__fp_zero>:
 3f6:	e8 94       	clt

000003f8 <__fp_szero>:
 3f8:	bb 27       	eor	r27, r27
 3fa:	66 27       	eor	r22, r22
 3fc:	77 27       	eor	r23, r23
 3fe:	cb 01       	movw	r24, r22
 400:	97 f9       	bld	r25, 7
 402:	08 95       	ret

00000404 <_exit>:
 404:	f8 94       	cli

00000406 <__stop_program>:
 406:	ff cf       	rjmp	.-2      	; 0x406 <__stop_program>
