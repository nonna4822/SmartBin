
Bin.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000146  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000f2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000146  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000178  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000743  00000000  00000000  000001d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000068a  00000000  00000000  0000091b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000297  00000000  00000000  00000fa5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  0000123c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000390  00000000  00000000  00001260  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000048  00000000  00000000  000015f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001638  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 77 00 	jmp	0xee	; 0xee <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
#include <util/delay.h>


int main(void)
{
	DDRB |= (1<<PORTB1);	/* Make OC1A pin as output */
  80:	21 9a       	sbi	0x04, 1	; 4
	TCNT1 = 0;		/* Set timer1 count zero */
  82:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
  86:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
	ICR1 = 2499;		/* Set TOP count for timer1 in ICR1 register */
  8a:	83 ec       	ldi	r24, 0xC3	; 195
  8c:	99 e0       	ldi	r25, 0x09	; 9
  8e:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
  92:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
	//TCCR1A|=(1<<COM1A1)|(1<<WGM11);        //NON Inverted PWM
	//TCCR1B|=(1<<WGM13)|(1<<WGM12)|(1<<CS11); //PRESCALER=8 MODE 14(FAST PWM)

	
	/* Set Fast PWM, TOP in ICR1, Clear OC1A on compare match, clk/64 */
	TCCR1A = (1<<WGM11)|(1<<COM1A1);
  96:	82 e8       	ldi	r24, 0x82	; 130
  98:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
	TCCR1B = (1<<WGM12)|(1<<WGM13)|(1<<CS11);
  9c:	8a e1       	ldi	r24, 0x1A	; 26
  9e:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
	
	/* Replace with your application code */
	while (1)
	{
		OCR1A = 0;
  a2:	e8 e8       	ldi	r30, 0x88	; 136
  a4:	f0 e0       	ldi	r31, 0x00	; 0
		if(PINB & (1<<PORTB) ){
			if(PIND & (1<<PIND2)){ //close bin
				OCR1A = 175;
				_delay_ms(100);
			}else {
				OCR1A = 300;	//open bin
  a6:	6c e2       	ldi	r22, 0x2C	; 44
  a8:	71 e0       	ldi	r23, 0x01	; 1
	while (1)
	{
		OCR1A = 0;
		if(PINB & (1<<PORTB) ){
			if(PIND & (1<<PIND2)){ //close bin
				OCR1A = 175;
  aa:	4f ea       	ldi	r20, 0xAF	; 175
  ac:	50 e0       	ldi	r21, 0x00	; 0
	TCCR1B = (1<<WGM12)|(1<<WGM13)|(1<<CS11);
	
	/* Replace with your application code */
	while (1)
	{
		OCR1A = 0;
  ae:	11 82       	std	Z+1, r1	; 0x01
  b0:	10 82       	st	Z, r1
		if(PINB & (1<<PORTB) ){
  b2:	83 b1       	in	r24, 0x03	; 3
  b4:	25 b1       	in	r18, 0x05	; 5
  b6:	90 e0       	ldi	r25, 0x00	; 0
  b8:	02 c0       	rjmp	.+4      	; 0xbe <main+0x3e>
  ba:	95 95       	asr	r25
  bc:	87 95       	ror	r24
  be:	2a 95       	dec	r18
  c0:	e2 f7       	brpl	.-8      	; 0xba <main+0x3a>
  c2:	80 ff       	sbrs	r24, 0
  c4:	f4 cf       	rjmp	.-24     	; 0xae <main+0x2e>
			if(PIND & (1<<PIND2)){ //close bin
  c6:	4a 9b       	sbis	0x09, 2	; 9
  c8:	09 c0       	rjmp	.+18     	; 0xdc <main+0x5c>
				OCR1A = 175;
  ca:	51 83       	std	Z+1, r21	; 0x01
  cc:	40 83       	st	Z, r20
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ce:	87 ea       	ldi	r24, 0xA7	; 167
  d0:	91 e6       	ldi	r25, 0x61	; 97
  d2:	01 97       	sbiw	r24, 0x01	; 1
  d4:	f1 f7       	brne	.-4      	; 0xd2 <main+0x52>
  d6:	00 c0       	rjmp	.+0      	; 0xd8 <main+0x58>
  d8:	00 00       	nop
  da:	e9 cf       	rjmp	.-46     	; 0xae <main+0x2e>
				_delay_ms(100);
			}else {
				OCR1A = 300;	//open bin
  dc:	71 83       	std	Z+1, r23	; 0x01
  de:	60 83       	st	Z, r22
  e0:	87 ea       	ldi	r24, 0xA7	; 167
  e2:	91 e6       	ldi	r25, 0x61	; 97
  e4:	01 97       	sbiw	r24, 0x01	; 1
  e6:	f1 f7       	brne	.-4      	; 0xe4 <main+0x64>
  e8:	00 c0       	rjmp	.+0      	; 0xea <main+0x6a>
  ea:	00 00       	nop
  ec:	e0 cf       	rjmp	.-64     	; 0xae <main+0x2e>

000000ee <_exit>:
  ee:	f8 94       	cli

000000f0 <__stop_program>:
  f0:	ff cf       	rjmp	.-2      	; 0xf0 <__stop_program>
