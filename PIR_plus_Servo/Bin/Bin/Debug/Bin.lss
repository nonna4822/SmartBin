
Bin.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000484  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000410  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  00000484  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000484  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000004b4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  000004f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000087c  00000000  00000000  0000051c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006e2  00000000  00000000  00000d98  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000357  00000000  00000000  0000147a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000048  00000000  00000000  000017d4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003d7  00000000  00000000  0000181c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000018b  00000000  00000000  00001bf3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  00001d7e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 48 00 	jmp	0x90	; 0x90 <__vector_13>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a2 30       	cpi	r26, 0x02	; 2
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 5f 00 	call	0xbe	; 0xbe <main>
  88:	0c 94 06 02 	jmp	0x40c	; 0x40c <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <__vector_13>:
#define Trigger_pin PORTB1 /* Trigger pin */

int TimerOverflow = 0;

ISR(TIMER1_OVF_vect)
{
  90:	1f 92       	push	r1
  92:	0f 92       	push	r0
  94:	0f b6       	in	r0, 0x3f	; 63
  96:	0f 92       	push	r0
  98:	11 24       	eor	r1, r1
  9a:	8f 93       	push	r24
  9c:	9f 93       	push	r25
	TimerOverflow++; /* Increment Timer Overflow count */
  9e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  a2:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
  a6:	01 96       	adiw	r24, 0x01	; 1
  a8:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
  ac:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
}
  b0:	9f 91       	pop	r25
  b2:	8f 91       	pop	r24
  b4:	0f 90       	pop	r0
  b6:	0f be       	out	0x3f, r0	; 63
  b8:	0f 90       	pop	r0
  ba:	1f 90       	pop	r1
  bc:	18 95       	reti

000000be <main>:
{
	/*ultrasonic */
	double distance;
	long count;
	
	DDRB |= (1<<PORTB1);
  be:	21 9a       	sbi	0x04, 1	; 4
	PORTB |= (1<<PORTB0);
  c0:	28 9a       	sbi	0x05, 0	; 5

	sei();                /* Enable global interrupt */
  c2:	78 94       	sei
	TIMSK1 = (1 << TOIE1); /* Enable Timer1 overflow interrupts */
  c4:	81 e0       	ldi	r24, 0x01	; 1
  c6:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
	TCCR1A = 0;           /* Set all bit to zero Normal operation */
  ca:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
	
	/*servo-motor */
	DDRC |= 0x00;
  ce:	87 b1       	in	r24, 0x07	; 7
  d0:	87 b9       	out	0x07, r24	; 7
	DDRD |= (1<<PORTD6);	/* Make OC0A pin as output */
  d2:	56 9a       	sbi	0x0a, 6	; 10
	TCNT0 = 0;		/* Set timer0 count zero */
  d4:	16 bc       	out	0x26, r1	; 38
	TCCR0A|=(1<<COM0A1)|(1<<WGM01)|(1<<WGM00);        //NON Inverted PWM
  d6:	84 b5       	in	r24, 0x24	; 36
  d8:	83 68       	ori	r24, 0x83	; 131
  da:	84 bd       	out	0x24, r24	; 36
	TCCR0B|=(1<<CS01); //PRESCALER=256 MODE 14(FAST PWM)
  dc:	85 b5       	in	r24, 0x25	; 37
  de:	82 60       	ori	r24, 0x02	; 2
  e0:	85 bd       	out	0x25, r24	; 37
		/* Give 10us trigger pulse on trig. pin to HC-SR04 */
		PORTB |= (1 << Trigger_pin);
		_delay_us(10);
		PORTB &= (~(1 << Trigger_pin));

		TCNT1 = 0;         /* Clear Timer counter */
  e2:	04 e8       	ldi	r16, 0x84	; 132
  e4:	10 e0       	ldi	r17, 0x00	; 0
		TCCR1B = 0x41;     /* Capture on rising edge, No prescaler*/
  e6:	c1 e8       	ldi	r28, 0x81	; 129
  e8:	d0 e0       	ldi	r29, 0x00	; 0
  ea:	0f 2e       	mov	r0, r31
  ec:	f1 e4       	ldi	r31, 0x41	; 65
  ee:	bf 2e       	mov	r11, r31
  f0:	f0 2d       	mov	r31, r0
		TIFR1 = 1 << ICF1; /* Clear ICP flag (Input Capture flag) */
  f2:	68 94       	set
  f4:	cc 24       	eor	r12, r12
  f6:	c5 f8       	bld	r12, 5
		TIFR1 = 1 << TOV1; /* Clear Timer Overflow flag */
  f8:	dd 24       	eor	r13, r13
  fa:	d3 94       	inc	r13
		TIFR1 = 1 << ICF1; /* Clear ICP flag (Input Capture flag) */
		TIFR1 = 1 << TOV1; /* Clear Timer Overflow flag */
		TimerOverflow = 0; /* Clear Timer overflow count */

		while ((TIFR1 & (1 << ICF1)) == 0);  /* Wait for falling edge */
		count = ICR1 + (65535 * TimerOverflow); /* Take count */
  fc:	0f 2e       	mov	r0, r31
  fe:	f6 e8       	ldi	r31, 0x86	; 134
 100:	ef 2e       	mov	r14, r31
 102:	f1 2c       	mov	r15, r1
 104:	f0 2d       	mov	r31, r0
		distance = (double)count / 466.47;
		
		if(distance < 1){
			OCR0A = 0;	//0
			_delay_ms(1500);
			OCR0A = 175; //90
 106:	0f 2e       	mov	r0, r31
 108:	ff ea       	ldi	r31, 0xAF	; 175
 10a:	af 2e       	mov	r10, r31
 10c:	f0 2d       	mov	r31, r0
	/* Replace with your application code */
	
	while (1)
	{
		/* ultrasonic */
		DDRB |= (1<<PB2);
 10e:	22 9a       	sbi	0x04, 2	; 4
		
		/* Give 10us trigger pulse on trig. pin to HC-SR04 */
		PORTB |= (1 << Trigger_pin);
 110:	29 9a       	sbi	0x05, 1	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 112:	23 e0       	ldi	r18, 0x03	; 3
 114:	2a 95       	dec	r18
 116:	f1 f7       	brne	.-4      	; 0x114 <main+0x56>
 118:	00 00       	nop
		_delay_us(10);
		PORTB &= (~(1 << Trigger_pin));
 11a:	29 98       	cbi	0x05, 1	; 5

		TCNT1 = 0;         /* Clear Timer counter */
 11c:	f8 01       	movw	r30, r16
 11e:	11 82       	std	Z+1, r1	; 0x01
 120:	10 82       	st	Z, r1
		TCCR1B = 0x41;     /* Capture on rising edge, No prescaler*/
 122:	b8 82       	st	Y, r11
		TIFR1 = 1 << ICF1; /* Clear ICP flag (Input Capture flag) */
 124:	c6 ba       	out	0x16, r12	; 22
		TIFR1 = 1 << TOV1; /* Clear Timer Overflow flag */
 126:	d6 ba       	out	0x16, r13	; 22

		/*Calculate width of Echo by Input Capture (ICP) */

		while ((TIFR1 & (1 << ICF1)) == 0);              /* Wait for rising edge */
 128:	b5 9b       	sbis	0x16, 5	; 22
 12a:	fe cf       	rjmp	.-4      	; 0x128 <main+0x6a>
		TCNT1 = 0;         /* Clear Timer counter */
 12c:	f8 01       	movw	r30, r16
 12e:	11 82       	std	Z+1, r1	; 0x01
 130:	10 82       	st	Z, r1
		TCCR1B = 0x01;     /* Capture on falling edge, No prescaler */
 132:	d8 82       	st	Y, r13
		TIFR1 = 1 << ICF1; /* Clear ICP flag (Input Capture flag) */
 134:	c6 ba       	out	0x16, r12	; 22
		TIFR1 = 1 << TOV1; /* Clear Timer Overflow flag */
 136:	d6 ba       	out	0x16, r13	; 22
		TimerOverflow = 0; /* Clear Timer overflow count */
 138:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <_edata+0x1>
 13c:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>

		while ((TIFR1 & (1 << ICF1)) == 0);  /* Wait for falling edge */
 140:	b5 9b       	sbis	0x16, 5	; 22
 142:	fe cf       	rjmp	.-4      	; 0x140 <main+0x82>
		count = ICR1 + (65535 * TimerOverflow); /* Take count */
 144:	f7 01       	movw	r30, r14
 146:	60 81       	ld	r22, Z
 148:	71 81       	ldd	r23, Z+1	; 0x01
		/* 8MHz Timer freq, sound speed =343 m/s */
		distance = (double)count / 466.47;
		
		if(distance < 1){
 14a:	80 e0       	ldi	r24, 0x00	; 0
 14c:	90 e0       	ldi	r25, 0x00	; 0
 14e:	0e 94 56 01 	call	0x2ac	; 0x2ac <__floatsisf>
 152:	29 e2       	ldi	r18, 0x29	; 41
 154:	3c e3       	ldi	r19, 0x3C	; 60
 156:	49 ee       	ldi	r20, 0xE9	; 233
 158:	53 e4       	ldi	r21, 0x43	; 67
 15a:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <__divsf3>
 15e:	20 e0       	ldi	r18, 0x00	; 0
 160:	30 e0       	ldi	r19, 0x00	; 0
 162:	40 e8       	ldi	r20, 0x80	; 128
 164:	5f e3       	ldi	r21, 0x3F	; 63
 166:	0e 94 dd 00 	call	0x1ba	; 0x1ba <__cmpsf2>
 16a:	88 23       	and	r24, r24
 16c:	ac f4       	brge	.+42     	; 0x198 <main+0xda>
			OCR0A = 0;	//0
 16e:	17 bc       	out	0x27, r1	; 39
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 170:	ff ed       	ldi	r31, 0xDF	; 223
 172:	23 e9       	ldi	r18, 0x93	; 147
 174:	84 e0       	ldi	r24, 0x04	; 4
 176:	f1 50       	subi	r31, 0x01	; 1
 178:	20 40       	sbci	r18, 0x00	; 0
 17a:	80 40       	sbci	r24, 0x00	; 0
 17c:	e1 f7       	brne	.-8      	; 0x176 <main+0xb8>
 17e:	00 c0       	rjmp	.+0      	; 0x180 <main+0xc2>
 180:	00 00       	nop
			_delay_ms(1500);
			OCR0A = 175; //90
 182:	a7 bc       	out	0x27, r10	; 39
 184:	9f ed       	ldi	r25, 0xDF	; 223
 186:	e3 e9       	ldi	r30, 0x93	; 147
 188:	f4 e0       	ldi	r31, 0x04	; 4
 18a:	91 50       	subi	r25, 0x01	; 1
 18c:	e0 40       	sbci	r30, 0x00	; 0
 18e:	f0 40       	sbci	r31, 0x00	; 0
 190:	e1 f7       	brne	.-8      	; 0x18a <main+0xcc>
 192:	00 c0       	rjmp	.+0      	; 0x194 <main+0xd6>
 194:	00 00       	nop
 196:	0a c0       	rjmp	.+20     	; 0x1ac <main+0xee>
			_delay_ms(1500);
		}else {
			OCR0A = 0;
 198:	17 bc       	out	0x27, r1	; 39
 19a:	2f ed       	ldi	r18, 0xDF	; 223
 19c:	83 e9       	ldi	r24, 0x93	; 147
 19e:	94 e0       	ldi	r25, 0x04	; 4
 1a0:	21 50       	subi	r18, 0x01	; 1
 1a2:	80 40       	sbci	r24, 0x00	; 0
 1a4:	90 40       	sbci	r25, 0x00	; 0
 1a6:	e1 f7       	brne	.-8      	; 0x1a0 <main+0xe2>
 1a8:	00 c0       	rjmp	.+0      	; 0x1aa <main+0xec>
 1aa:	00 00       	nop
 1ac:	e3 e2       	ldi	r30, 0x23	; 35
 1ae:	f4 ef       	ldi	r31, 0xF4	; 244
 1b0:	31 97       	sbiw	r30, 0x01	; 1
 1b2:	f1 f7       	brne	.-4      	; 0x1b0 <main+0xf2>
 1b4:	00 c0       	rjmp	.+0      	; 0x1b6 <main+0xf8>
 1b6:	00 00       	nop
 1b8:	aa cf       	rjmp	.-172    	; 0x10e <main+0x50>

000001ba <__cmpsf2>:
 1ba:	0e 94 91 01 	call	0x322	; 0x322 <__fp_cmp>
 1be:	08 f4       	brcc	.+2      	; 0x1c2 <__cmpsf2+0x8>
 1c0:	81 e0       	ldi	r24, 0x01	; 1
 1c2:	08 95       	ret

000001c4 <__divsf3>:
 1c4:	0e 94 f6 00 	call	0x1ec	; 0x1ec <__divsf3x>
 1c8:	0c 94 cc 01 	jmp	0x398	; 0x398 <__fp_round>
 1cc:	0e 94 c5 01 	call	0x38a	; 0x38a <__fp_pscB>
 1d0:	58 f0       	brcs	.+22     	; 0x1e8 <__divsf3+0x24>
 1d2:	0e 94 be 01 	call	0x37c	; 0x37c <__fp_pscA>
 1d6:	40 f0       	brcs	.+16     	; 0x1e8 <__divsf3+0x24>
 1d8:	29 f4       	brne	.+10     	; 0x1e4 <__divsf3+0x20>
 1da:	5f 3f       	cpi	r21, 0xFF	; 255
 1dc:	29 f0       	breq	.+10     	; 0x1e8 <__divsf3+0x24>
 1de:	0c 94 b5 01 	jmp	0x36a	; 0x36a <__fp_inf>
 1e2:	51 11       	cpse	r21, r1
 1e4:	0c 94 00 02 	jmp	0x400	; 0x400 <__fp_szero>
 1e8:	0c 94 bb 01 	jmp	0x376	; 0x376 <__fp_nan>

000001ec <__divsf3x>:
 1ec:	0e 94 dd 01 	call	0x3ba	; 0x3ba <__fp_split3>
 1f0:	68 f3       	brcs	.-38     	; 0x1cc <__divsf3+0x8>

000001f2 <__divsf3_pse>:
 1f2:	99 23       	and	r25, r25
 1f4:	b1 f3       	breq	.-20     	; 0x1e2 <__divsf3+0x1e>
 1f6:	55 23       	and	r21, r21
 1f8:	91 f3       	breq	.-28     	; 0x1de <__divsf3+0x1a>
 1fa:	95 1b       	sub	r25, r21
 1fc:	55 0b       	sbc	r21, r21
 1fe:	bb 27       	eor	r27, r27
 200:	aa 27       	eor	r26, r26
 202:	62 17       	cp	r22, r18
 204:	73 07       	cpc	r23, r19
 206:	84 07       	cpc	r24, r20
 208:	38 f0       	brcs	.+14     	; 0x218 <__divsf3_pse+0x26>
 20a:	9f 5f       	subi	r25, 0xFF	; 255
 20c:	5f 4f       	sbci	r21, 0xFF	; 255
 20e:	22 0f       	add	r18, r18
 210:	33 1f       	adc	r19, r19
 212:	44 1f       	adc	r20, r20
 214:	aa 1f       	adc	r26, r26
 216:	a9 f3       	breq	.-22     	; 0x202 <__divsf3_pse+0x10>
 218:	35 d0       	rcall	.+106    	; 0x284 <__divsf3_pse+0x92>
 21a:	0e 2e       	mov	r0, r30
 21c:	3a f0       	brmi	.+14     	; 0x22c <__divsf3_pse+0x3a>
 21e:	e0 e8       	ldi	r30, 0x80	; 128
 220:	32 d0       	rcall	.+100    	; 0x286 <__divsf3_pse+0x94>
 222:	91 50       	subi	r25, 0x01	; 1
 224:	50 40       	sbci	r21, 0x00	; 0
 226:	e6 95       	lsr	r30
 228:	00 1c       	adc	r0, r0
 22a:	ca f7       	brpl	.-14     	; 0x21e <__divsf3_pse+0x2c>
 22c:	2b d0       	rcall	.+86     	; 0x284 <__divsf3_pse+0x92>
 22e:	fe 2f       	mov	r31, r30
 230:	29 d0       	rcall	.+82     	; 0x284 <__divsf3_pse+0x92>
 232:	66 0f       	add	r22, r22
 234:	77 1f       	adc	r23, r23
 236:	88 1f       	adc	r24, r24
 238:	bb 1f       	adc	r27, r27
 23a:	26 17       	cp	r18, r22
 23c:	37 07       	cpc	r19, r23
 23e:	48 07       	cpc	r20, r24
 240:	ab 07       	cpc	r26, r27
 242:	b0 e8       	ldi	r27, 0x80	; 128
 244:	09 f0       	breq	.+2      	; 0x248 <__divsf3_pse+0x56>
 246:	bb 0b       	sbc	r27, r27
 248:	80 2d       	mov	r24, r0
 24a:	bf 01       	movw	r22, r30
 24c:	ff 27       	eor	r31, r31
 24e:	93 58       	subi	r25, 0x83	; 131
 250:	5f 4f       	sbci	r21, 0xFF	; 255
 252:	3a f0       	brmi	.+14     	; 0x262 <__divsf3_pse+0x70>
 254:	9e 3f       	cpi	r25, 0xFE	; 254
 256:	51 05       	cpc	r21, r1
 258:	78 f0       	brcs	.+30     	; 0x278 <__divsf3_pse+0x86>
 25a:	0c 94 b5 01 	jmp	0x36a	; 0x36a <__fp_inf>
 25e:	0c 94 00 02 	jmp	0x400	; 0x400 <__fp_szero>
 262:	5f 3f       	cpi	r21, 0xFF	; 255
 264:	e4 f3       	brlt	.-8      	; 0x25e <__divsf3_pse+0x6c>
 266:	98 3e       	cpi	r25, 0xE8	; 232
 268:	d4 f3       	brlt	.-12     	; 0x25e <__divsf3_pse+0x6c>
 26a:	86 95       	lsr	r24
 26c:	77 95       	ror	r23
 26e:	67 95       	ror	r22
 270:	b7 95       	ror	r27
 272:	f7 95       	ror	r31
 274:	9f 5f       	subi	r25, 0xFF	; 255
 276:	c9 f7       	brne	.-14     	; 0x26a <__divsf3_pse+0x78>
 278:	88 0f       	add	r24, r24
 27a:	91 1d       	adc	r25, r1
 27c:	96 95       	lsr	r25
 27e:	87 95       	ror	r24
 280:	97 f9       	bld	r25, 7
 282:	08 95       	ret
 284:	e1 e0       	ldi	r30, 0x01	; 1
 286:	66 0f       	add	r22, r22
 288:	77 1f       	adc	r23, r23
 28a:	88 1f       	adc	r24, r24
 28c:	bb 1f       	adc	r27, r27
 28e:	62 17       	cp	r22, r18
 290:	73 07       	cpc	r23, r19
 292:	84 07       	cpc	r24, r20
 294:	ba 07       	cpc	r27, r26
 296:	20 f0       	brcs	.+8      	; 0x2a0 <__divsf3_pse+0xae>
 298:	62 1b       	sub	r22, r18
 29a:	73 0b       	sbc	r23, r19
 29c:	84 0b       	sbc	r24, r20
 29e:	ba 0b       	sbc	r27, r26
 2a0:	ee 1f       	adc	r30, r30
 2a2:	88 f7       	brcc	.-30     	; 0x286 <__divsf3_pse+0x94>
 2a4:	e0 95       	com	r30
 2a6:	08 95       	ret

000002a8 <__floatunsisf>:
 2a8:	e8 94       	clt
 2aa:	09 c0       	rjmp	.+18     	; 0x2be <__floatsisf+0x12>

000002ac <__floatsisf>:
 2ac:	97 fb       	bst	r25, 7
 2ae:	3e f4       	brtc	.+14     	; 0x2be <__floatsisf+0x12>
 2b0:	90 95       	com	r25
 2b2:	80 95       	com	r24
 2b4:	70 95       	com	r23
 2b6:	61 95       	neg	r22
 2b8:	7f 4f       	sbci	r23, 0xFF	; 255
 2ba:	8f 4f       	sbci	r24, 0xFF	; 255
 2bc:	9f 4f       	sbci	r25, 0xFF	; 255
 2be:	99 23       	and	r25, r25
 2c0:	a9 f0       	breq	.+42     	; 0x2ec <__floatsisf+0x40>
 2c2:	f9 2f       	mov	r31, r25
 2c4:	96 e9       	ldi	r25, 0x96	; 150
 2c6:	bb 27       	eor	r27, r27
 2c8:	93 95       	inc	r25
 2ca:	f6 95       	lsr	r31
 2cc:	87 95       	ror	r24
 2ce:	77 95       	ror	r23
 2d0:	67 95       	ror	r22
 2d2:	b7 95       	ror	r27
 2d4:	f1 11       	cpse	r31, r1
 2d6:	f8 cf       	rjmp	.-16     	; 0x2c8 <__floatsisf+0x1c>
 2d8:	fa f4       	brpl	.+62     	; 0x318 <__floatsisf+0x6c>
 2da:	bb 0f       	add	r27, r27
 2dc:	11 f4       	brne	.+4      	; 0x2e2 <__floatsisf+0x36>
 2de:	60 ff       	sbrs	r22, 0
 2e0:	1b c0       	rjmp	.+54     	; 0x318 <__floatsisf+0x6c>
 2e2:	6f 5f       	subi	r22, 0xFF	; 255
 2e4:	7f 4f       	sbci	r23, 0xFF	; 255
 2e6:	8f 4f       	sbci	r24, 0xFF	; 255
 2e8:	9f 4f       	sbci	r25, 0xFF	; 255
 2ea:	16 c0       	rjmp	.+44     	; 0x318 <__floatsisf+0x6c>
 2ec:	88 23       	and	r24, r24
 2ee:	11 f0       	breq	.+4      	; 0x2f4 <__floatsisf+0x48>
 2f0:	96 e9       	ldi	r25, 0x96	; 150
 2f2:	11 c0       	rjmp	.+34     	; 0x316 <__floatsisf+0x6a>
 2f4:	77 23       	and	r23, r23
 2f6:	21 f0       	breq	.+8      	; 0x300 <__floatsisf+0x54>
 2f8:	9e e8       	ldi	r25, 0x8E	; 142
 2fa:	87 2f       	mov	r24, r23
 2fc:	76 2f       	mov	r23, r22
 2fe:	05 c0       	rjmp	.+10     	; 0x30a <__floatsisf+0x5e>
 300:	66 23       	and	r22, r22
 302:	71 f0       	breq	.+28     	; 0x320 <__floatsisf+0x74>
 304:	96 e8       	ldi	r25, 0x86	; 134
 306:	86 2f       	mov	r24, r22
 308:	70 e0       	ldi	r23, 0x00	; 0
 30a:	60 e0       	ldi	r22, 0x00	; 0
 30c:	2a f0       	brmi	.+10     	; 0x318 <__floatsisf+0x6c>
 30e:	9a 95       	dec	r25
 310:	66 0f       	add	r22, r22
 312:	77 1f       	adc	r23, r23
 314:	88 1f       	adc	r24, r24
 316:	da f7       	brpl	.-10     	; 0x30e <__floatsisf+0x62>
 318:	88 0f       	add	r24, r24
 31a:	96 95       	lsr	r25
 31c:	87 95       	ror	r24
 31e:	97 f9       	bld	r25, 7
 320:	08 95       	ret

00000322 <__fp_cmp>:
 322:	99 0f       	add	r25, r25
 324:	00 08       	sbc	r0, r0
 326:	55 0f       	add	r21, r21
 328:	aa 0b       	sbc	r26, r26
 32a:	e0 e8       	ldi	r30, 0x80	; 128
 32c:	fe ef       	ldi	r31, 0xFE	; 254
 32e:	16 16       	cp	r1, r22
 330:	17 06       	cpc	r1, r23
 332:	e8 07       	cpc	r30, r24
 334:	f9 07       	cpc	r31, r25
 336:	c0 f0       	brcs	.+48     	; 0x368 <__fp_cmp+0x46>
 338:	12 16       	cp	r1, r18
 33a:	13 06       	cpc	r1, r19
 33c:	e4 07       	cpc	r30, r20
 33e:	f5 07       	cpc	r31, r21
 340:	98 f0       	brcs	.+38     	; 0x368 <__fp_cmp+0x46>
 342:	62 1b       	sub	r22, r18
 344:	73 0b       	sbc	r23, r19
 346:	84 0b       	sbc	r24, r20
 348:	95 0b       	sbc	r25, r21
 34a:	39 f4       	brne	.+14     	; 0x35a <__fp_cmp+0x38>
 34c:	0a 26       	eor	r0, r26
 34e:	61 f0       	breq	.+24     	; 0x368 <__fp_cmp+0x46>
 350:	23 2b       	or	r18, r19
 352:	24 2b       	or	r18, r20
 354:	25 2b       	or	r18, r21
 356:	21 f4       	brne	.+8      	; 0x360 <__fp_cmp+0x3e>
 358:	08 95       	ret
 35a:	0a 26       	eor	r0, r26
 35c:	09 f4       	brne	.+2      	; 0x360 <__fp_cmp+0x3e>
 35e:	a1 40       	sbci	r26, 0x01	; 1
 360:	a6 95       	lsr	r26
 362:	8f ef       	ldi	r24, 0xFF	; 255
 364:	81 1d       	adc	r24, r1
 366:	81 1d       	adc	r24, r1
 368:	08 95       	ret

0000036a <__fp_inf>:
 36a:	97 f9       	bld	r25, 7
 36c:	9f 67       	ori	r25, 0x7F	; 127
 36e:	80 e8       	ldi	r24, 0x80	; 128
 370:	70 e0       	ldi	r23, 0x00	; 0
 372:	60 e0       	ldi	r22, 0x00	; 0
 374:	08 95       	ret

00000376 <__fp_nan>:
 376:	9f ef       	ldi	r25, 0xFF	; 255
 378:	80 ec       	ldi	r24, 0xC0	; 192
 37a:	08 95       	ret

0000037c <__fp_pscA>:
 37c:	00 24       	eor	r0, r0
 37e:	0a 94       	dec	r0
 380:	16 16       	cp	r1, r22
 382:	17 06       	cpc	r1, r23
 384:	18 06       	cpc	r1, r24
 386:	09 06       	cpc	r0, r25
 388:	08 95       	ret

0000038a <__fp_pscB>:
 38a:	00 24       	eor	r0, r0
 38c:	0a 94       	dec	r0
 38e:	12 16       	cp	r1, r18
 390:	13 06       	cpc	r1, r19
 392:	14 06       	cpc	r1, r20
 394:	05 06       	cpc	r0, r21
 396:	08 95       	ret

00000398 <__fp_round>:
 398:	09 2e       	mov	r0, r25
 39a:	03 94       	inc	r0
 39c:	00 0c       	add	r0, r0
 39e:	11 f4       	brne	.+4      	; 0x3a4 <__fp_round+0xc>
 3a0:	88 23       	and	r24, r24
 3a2:	52 f0       	brmi	.+20     	; 0x3b8 <__fp_round+0x20>
 3a4:	bb 0f       	add	r27, r27
 3a6:	40 f4       	brcc	.+16     	; 0x3b8 <__fp_round+0x20>
 3a8:	bf 2b       	or	r27, r31
 3aa:	11 f4       	brne	.+4      	; 0x3b0 <__fp_round+0x18>
 3ac:	60 ff       	sbrs	r22, 0
 3ae:	04 c0       	rjmp	.+8      	; 0x3b8 <__fp_round+0x20>
 3b0:	6f 5f       	subi	r22, 0xFF	; 255
 3b2:	7f 4f       	sbci	r23, 0xFF	; 255
 3b4:	8f 4f       	sbci	r24, 0xFF	; 255
 3b6:	9f 4f       	sbci	r25, 0xFF	; 255
 3b8:	08 95       	ret

000003ba <__fp_split3>:
 3ba:	57 fd       	sbrc	r21, 7
 3bc:	90 58       	subi	r25, 0x80	; 128
 3be:	44 0f       	add	r20, r20
 3c0:	55 1f       	adc	r21, r21
 3c2:	59 f0       	breq	.+22     	; 0x3da <__fp_splitA+0x10>
 3c4:	5f 3f       	cpi	r21, 0xFF	; 255
 3c6:	71 f0       	breq	.+28     	; 0x3e4 <__fp_splitA+0x1a>
 3c8:	47 95       	ror	r20

000003ca <__fp_splitA>:
 3ca:	88 0f       	add	r24, r24
 3cc:	97 fb       	bst	r25, 7
 3ce:	99 1f       	adc	r25, r25
 3d0:	61 f0       	breq	.+24     	; 0x3ea <__fp_splitA+0x20>
 3d2:	9f 3f       	cpi	r25, 0xFF	; 255
 3d4:	79 f0       	breq	.+30     	; 0x3f4 <__fp_splitA+0x2a>
 3d6:	87 95       	ror	r24
 3d8:	08 95       	ret
 3da:	12 16       	cp	r1, r18
 3dc:	13 06       	cpc	r1, r19
 3de:	14 06       	cpc	r1, r20
 3e0:	55 1f       	adc	r21, r21
 3e2:	f2 cf       	rjmp	.-28     	; 0x3c8 <__fp_split3+0xe>
 3e4:	46 95       	lsr	r20
 3e6:	f1 df       	rcall	.-30     	; 0x3ca <__fp_splitA>
 3e8:	08 c0       	rjmp	.+16     	; 0x3fa <__fp_splitA+0x30>
 3ea:	16 16       	cp	r1, r22
 3ec:	17 06       	cpc	r1, r23
 3ee:	18 06       	cpc	r1, r24
 3f0:	99 1f       	adc	r25, r25
 3f2:	f1 cf       	rjmp	.-30     	; 0x3d6 <__fp_splitA+0xc>
 3f4:	86 95       	lsr	r24
 3f6:	71 05       	cpc	r23, r1
 3f8:	61 05       	cpc	r22, r1
 3fa:	08 94       	sec
 3fc:	08 95       	ret

000003fe <__fp_zero>:
 3fe:	e8 94       	clt

00000400 <__fp_szero>:
 400:	bb 27       	eor	r27, r27
 402:	66 27       	eor	r22, r22
 404:	77 27       	eor	r23, r23
 406:	cb 01       	movw	r24, r22
 408:	97 f9       	bld	r25, 7
 40a:	08 95       	ret

0000040c <_exit>:
 40c:	f8 94       	cli

0000040e <__stop_program>:
 40e:	ff cf       	rjmp	.-2      	; 0x40e <__stop_program>
