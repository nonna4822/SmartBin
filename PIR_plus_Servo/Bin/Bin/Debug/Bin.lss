
Bin.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000450  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003dc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  00000450  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000450  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000480  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  000004c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000075d  00000000  00000000  000004e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006a1  00000000  00000000  00000c45  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000348  00000000  00000000  000012e6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000048  00000000  00000000  00001630  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003c8  00000000  00000000  00001678  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000b3  00000000  00000000  00001a40  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  00001af3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 48 00 	jmp	0x90	; 0x90 <__vector_13>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a2 30       	cpi	r26, 0x02	; 2
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 5f 00 	call	0xbe	; 0xbe <main>
  88:	0c 94 ec 01 	jmp	0x3d8	; 0x3d8 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <__vector_13>:
#define Trigger_pin PORTB1 /* Trigger pin */

int TimerOverflow = 0;

ISR(TIMER1_OVF_vect)
{
  90:	1f 92       	push	r1
  92:	0f 92       	push	r0
  94:	0f b6       	in	r0, 0x3f	; 63
  96:	0f 92       	push	r0
  98:	11 24       	eor	r1, r1
  9a:	8f 93       	push	r24
  9c:	9f 93       	push	r25
	TimerOverflow++; /* Increment Timer Overflow count */
  9e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  a2:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
  a6:	01 96       	adiw	r24, 0x01	; 1
  a8:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
  ac:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
}
  b0:	9f 91       	pop	r25
  b2:	8f 91       	pop	r24
  b4:	0f 90       	pop	r0
  b6:	0f be       	out	0x3f, r0	; 63
  b8:	0f 90       	pop	r0
  ba:	1f 90       	pop	r1
  bc:	18 95       	reti

000000be <main>:
{
	/*ultrasonic */
	double distance;
	long count;
	
	DDRB |= (1<<PORTB1) | (1<<PORTB2);
  be:	84 b1       	in	r24, 0x04	; 4
  c0:	86 60       	ori	r24, 0x06	; 6
  c2:	84 b9       	out	0x04, r24	; 4
	PORTB |= (1<<PORTB0);
  c4:	28 9a       	sbi	0x05, 0	; 5

	sei();                /* Enable global interrupt */
  c6:	78 94       	sei
	TIMSK1 = (1 << TOIE1); /* Enable Timer1 overflow interrupts */
  c8:	81 e0       	ldi	r24, 0x01	; 1
  ca:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
	TCCR1A = 0;           /* Set all bit to zero Normal operation */
  ce:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
	
	/*servo-motor */
	DDRC |= 0x00;
  d2:	87 b1       	in	r24, 0x07	; 7
  d4:	87 b9       	out	0x07, r24	; 7
	DDRD |= (1<<PORTD6);	/* Make OC0A pin as output */
  d6:	56 9a       	sbi	0x0a, 6	; 10
	TCNT0 = 0;		/* Set timer0 count zero */
  d8:	16 bc       	out	0x26, r1	; 38
	TCCR0A|=(1<<COM0A1)|(1<<WGM01)|(1<<WGM00);        //NON Inverted PWM
  da:	84 b5       	in	r24, 0x24	; 36
  dc:	83 68       	ori	r24, 0x83	; 131
  de:	84 bd       	out	0x24, r24	; 36
	TCCR0B|=(1<<CS01); //PRESCALER=256 MODE 14(FAST PWM)
  e0:	85 b5       	in	r24, 0x25	; 37
  e2:	82 60       	ori	r24, 0x02	; 2
  e4:	85 bd       	out	0x25, r24	; 37
		/* Give 10us trigger pulse on trig. pin to HC-SR04 */
		PORTB |= (1 << Trigger_pin);
		_delay_us(10);
		PORTB &= (~(1 << Trigger_pin));

		TCNT1 = 0;         /* Clear Timer counter */
  e6:	04 e8       	ldi	r16, 0x84	; 132
  e8:	10 e0       	ldi	r17, 0x00	; 0
		TCCR1B = 0x41;     /* Capture on rising edge, No prescaler*/
  ea:	c1 e8       	ldi	r28, 0x81	; 129
  ec:	d0 e0       	ldi	r29, 0x00	; 0
  ee:	0f 2e       	mov	r0, r31
  f0:	f1 e4       	ldi	r31, 0x41	; 65
  f2:	bf 2e       	mov	r11, r31
  f4:	f0 2d       	mov	r31, r0
		TIFR1 = 1 << ICF1; /* Clear ICP flag (Input Capture flag) */
  f6:	68 94       	set
  f8:	cc 24       	eor	r12, r12
  fa:	c5 f8       	bld	r12, 5
		TIFR1 = 1 << TOV1; /* Clear Timer Overflow flag */
  fc:	dd 24       	eor	r13, r13
  fe:	d3 94       	inc	r13
		TIFR1 = 1 << ICF1; /* Clear ICP flag (Input Capture flag) */
		TIFR1 = 1 << TOV1; /* Clear Timer Overflow flag */
		TimerOverflow = 0; /* Clear Timer overflow count */

		while ((TIFR1 & (1 << ICF1)) == 0);  /* Wait for falling edge */
		count = ICR1 + (65535 * TimerOverflow); /* Take count */
 100:	0f 2e       	mov	r0, r31
 102:	f6 e8       	ldi	r31, 0x86	; 134
 104:	ef 2e       	mov	r14, r31
 106:	f1 2c       	mov	r15, r1
 108:	f0 2d       	mov	r31, r0
			OCR0A = 0;
		}else{
			PORTB &= ~(1<<PORTB2);
			//OCR0A = 175;
			if(PINC & (1<<PORTC0)){
				OCR0A = 175;
 10a:	0f 2e       	mov	r0, r31
 10c:	ff ea       	ldi	r31, 0xAF	; 175
 10e:	af 2e       	mov	r10, r31
 110:	f0 2d       	mov	r31, r0
	/* Replace with your application code */
	
	while (1)
	{
		/* ultrasonic */
		DDRB |= (1<<PB2);
 112:	22 9a       	sbi	0x04, 2	; 4
		
		/* Give 10us trigger pulse on trig. pin to HC-SR04 */
		PORTB |= (1 << Trigger_pin);
 114:	29 9a       	sbi	0x05, 1	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 116:	83 e0       	ldi	r24, 0x03	; 3
 118:	8a 95       	dec	r24
 11a:	f1 f7       	brne	.-4      	; 0x118 <main+0x5a>
 11c:	00 00       	nop
		_delay_us(10);
		PORTB &= (~(1 << Trigger_pin));
 11e:	29 98       	cbi	0x05, 1	; 5

		TCNT1 = 0;         /* Clear Timer counter */
 120:	f8 01       	movw	r30, r16
 122:	11 82       	std	Z+1, r1	; 0x01
 124:	10 82       	st	Z, r1
		TCCR1B = 0x41;     /* Capture on rising edge, No prescaler*/
 126:	b8 82       	st	Y, r11
		TIFR1 = 1 << ICF1; /* Clear ICP flag (Input Capture flag) */
 128:	c6 ba       	out	0x16, r12	; 22
		TIFR1 = 1 << TOV1; /* Clear Timer Overflow flag */
 12a:	d6 ba       	out	0x16, r13	; 22

		/*Calculate width of Echo by Input Capture (ICP) */

		while ((TIFR1 & (1 << ICF1)) == 0);              /* Wait for rising edge */
 12c:	b5 9b       	sbis	0x16, 5	; 22
 12e:	fe cf       	rjmp	.-4      	; 0x12c <main+0x6e>
		TCNT1 = 0;         /* Clear Timer counter */
 130:	f8 01       	movw	r30, r16
 132:	11 82       	std	Z+1, r1	; 0x01
 134:	10 82       	st	Z, r1
		TCCR1B = 0x01;     /* Capture on falling edge, No prescaler */
 136:	d8 82       	st	Y, r13
		TIFR1 = 1 << ICF1; /* Clear ICP flag (Input Capture flag) */
 138:	c6 ba       	out	0x16, r12	; 22
		TIFR1 = 1 << TOV1; /* Clear Timer Overflow flag */
 13a:	d6 ba       	out	0x16, r13	; 22
		TimerOverflow = 0; /* Clear Timer overflow count */
 13c:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <_edata+0x1>
 140:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>

		while ((TIFR1 & (1 << ICF1)) == 0);  /* Wait for falling edge */
 144:	b5 9b       	sbis	0x16, 5	; 22
 146:	fe cf       	rjmp	.-4      	; 0x144 <main+0x86>
		count = ICR1 + (65535 * TimerOverflow); /* Take count */
 148:	f7 01       	movw	r30, r14
 14a:	60 81       	ld	r22, Z
 14c:	71 81       	ldd	r23, Z+1	; 0x01
		/* 8MHz Timer freq, sound speed =343 m/s */
		distance = (double)count / 466.47;
		
		if(distance < 5){
 14e:	80 e0       	ldi	r24, 0x00	; 0
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	0e 94 3c 01 	call	0x278	; 0x278 <__floatsisf>
 156:	29 e2       	ldi	r18, 0x29	; 41
 158:	3c e3       	ldi	r19, 0x3C	; 60
 15a:	49 ee       	ldi	r20, 0xE9	; 233
 15c:	53 e4       	ldi	r21, 0x43	; 67
 15e:	0e 94 c8 00 	call	0x190	; 0x190 <__divsf3>
 162:	20 e0       	ldi	r18, 0x00	; 0
 164:	30 e0       	ldi	r19, 0x00	; 0
 166:	40 ea       	ldi	r20, 0xA0	; 160
 168:	50 e4       	ldi	r21, 0x40	; 64
 16a:	0e 94 c3 00 	call	0x186	; 0x186 <__cmpsf2>
 16e:	88 23       	and	r24, r24
 170:	1c f4       	brge	.+6      	; 0x178 <main+0xba>
			PORTB |= (1<<PORTB2);
 172:	2a 9a       	sbi	0x05, 2	; 5
			OCR0A = 0;
 174:	17 bc       	out	0x27, r1	; 39
 176:	cd cf       	rjmp	.-102    	; 0x112 <main+0x54>
		}else{
			PORTB &= ~(1<<PORTB2);
 178:	2a 98       	cbi	0x05, 2	; 5
			//OCR0A = 175;
			if(PINC & (1<<PORTC0)){
 17a:	30 9b       	sbis	0x06, 0	; 6
 17c:	02 c0       	rjmp	.+4      	; 0x182 <main+0xc4>
				OCR0A = 175;
 17e:	a7 bc       	out	0x27, r10	; 39
 180:	c8 cf       	rjmp	.-112    	; 0x112 <main+0x54>
			}else {
				OCR0A = 0;
 182:	17 bc       	out	0x27, r1	; 39
 184:	c6 cf       	rjmp	.-116    	; 0x112 <main+0x54>

00000186 <__cmpsf2>:
 186:	0e 94 77 01 	call	0x2ee	; 0x2ee <__fp_cmp>
 18a:	08 f4       	brcc	.+2      	; 0x18e <__cmpsf2+0x8>
 18c:	81 e0       	ldi	r24, 0x01	; 1
 18e:	08 95       	ret

00000190 <__divsf3>:
 190:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <__divsf3x>
 194:	0c 94 b2 01 	jmp	0x364	; 0x364 <__fp_round>
 198:	0e 94 ab 01 	call	0x356	; 0x356 <__fp_pscB>
 19c:	58 f0       	brcs	.+22     	; 0x1b4 <__divsf3+0x24>
 19e:	0e 94 a4 01 	call	0x348	; 0x348 <__fp_pscA>
 1a2:	40 f0       	brcs	.+16     	; 0x1b4 <__divsf3+0x24>
 1a4:	29 f4       	brne	.+10     	; 0x1b0 <__divsf3+0x20>
 1a6:	5f 3f       	cpi	r21, 0xFF	; 255
 1a8:	29 f0       	breq	.+10     	; 0x1b4 <__divsf3+0x24>
 1aa:	0c 94 9b 01 	jmp	0x336	; 0x336 <__fp_inf>
 1ae:	51 11       	cpse	r21, r1
 1b0:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__fp_szero>
 1b4:	0c 94 a1 01 	jmp	0x342	; 0x342 <__fp_nan>

000001b8 <__divsf3x>:
 1b8:	0e 94 c3 01 	call	0x386	; 0x386 <__fp_split3>
 1bc:	68 f3       	brcs	.-38     	; 0x198 <__divsf3+0x8>

000001be <__divsf3_pse>:
 1be:	99 23       	and	r25, r25
 1c0:	b1 f3       	breq	.-20     	; 0x1ae <__divsf3+0x1e>
 1c2:	55 23       	and	r21, r21
 1c4:	91 f3       	breq	.-28     	; 0x1aa <__divsf3+0x1a>
 1c6:	95 1b       	sub	r25, r21
 1c8:	55 0b       	sbc	r21, r21
 1ca:	bb 27       	eor	r27, r27
 1cc:	aa 27       	eor	r26, r26
 1ce:	62 17       	cp	r22, r18
 1d0:	73 07       	cpc	r23, r19
 1d2:	84 07       	cpc	r24, r20
 1d4:	38 f0       	brcs	.+14     	; 0x1e4 <__divsf3_pse+0x26>
 1d6:	9f 5f       	subi	r25, 0xFF	; 255
 1d8:	5f 4f       	sbci	r21, 0xFF	; 255
 1da:	22 0f       	add	r18, r18
 1dc:	33 1f       	adc	r19, r19
 1de:	44 1f       	adc	r20, r20
 1e0:	aa 1f       	adc	r26, r26
 1e2:	a9 f3       	breq	.-22     	; 0x1ce <__divsf3_pse+0x10>
 1e4:	35 d0       	rcall	.+106    	; 0x250 <__divsf3_pse+0x92>
 1e6:	0e 2e       	mov	r0, r30
 1e8:	3a f0       	brmi	.+14     	; 0x1f8 <__divsf3_pse+0x3a>
 1ea:	e0 e8       	ldi	r30, 0x80	; 128
 1ec:	32 d0       	rcall	.+100    	; 0x252 <__divsf3_pse+0x94>
 1ee:	91 50       	subi	r25, 0x01	; 1
 1f0:	50 40       	sbci	r21, 0x00	; 0
 1f2:	e6 95       	lsr	r30
 1f4:	00 1c       	adc	r0, r0
 1f6:	ca f7       	brpl	.-14     	; 0x1ea <__divsf3_pse+0x2c>
 1f8:	2b d0       	rcall	.+86     	; 0x250 <__divsf3_pse+0x92>
 1fa:	fe 2f       	mov	r31, r30
 1fc:	29 d0       	rcall	.+82     	; 0x250 <__divsf3_pse+0x92>
 1fe:	66 0f       	add	r22, r22
 200:	77 1f       	adc	r23, r23
 202:	88 1f       	adc	r24, r24
 204:	bb 1f       	adc	r27, r27
 206:	26 17       	cp	r18, r22
 208:	37 07       	cpc	r19, r23
 20a:	48 07       	cpc	r20, r24
 20c:	ab 07       	cpc	r26, r27
 20e:	b0 e8       	ldi	r27, 0x80	; 128
 210:	09 f0       	breq	.+2      	; 0x214 <__divsf3_pse+0x56>
 212:	bb 0b       	sbc	r27, r27
 214:	80 2d       	mov	r24, r0
 216:	bf 01       	movw	r22, r30
 218:	ff 27       	eor	r31, r31
 21a:	93 58       	subi	r25, 0x83	; 131
 21c:	5f 4f       	sbci	r21, 0xFF	; 255
 21e:	3a f0       	brmi	.+14     	; 0x22e <__divsf3_pse+0x70>
 220:	9e 3f       	cpi	r25, 0xFE	; 254
 222:	51 05       	cpc	r21, r1
 224:	78 f0       	brcs	.+30     	; 0x244 <__divsf3_pse+0x86>
 226:	0c 94 9b 01 	jmp	0x336	; 0x336 <__fp_inf>
 22a:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__fp_szero>
 22e:	5f 3f       	cpi	r21, 0xFF	; 255
 230:	e4 f3       	brlt	.-8      	; 0x22a <__divsf3_pse+0x6c>
 232:	98 3e       	cpi	r25, 0xE8	; 232
 234:	d4 f3       	brlt	.-12     	; 0x22a <__divsf3_pse+0x6c>
 236:	86 95       	lsr	r24
 238:	77 95       	ror	r23
 23a:	67 95       	ror	r22
 23c:	b7 95       	ror	r27
 23e:	f7 95       	ror	r31
 240:	9f 5f       	subi	r25, 0xFF	; 255
 242:	c9 f7       	brne	.-14     	; 0x236 <__divsf3_pse+0x78>
 244:	88 0f       	add	r24, r24
 246:	91 1d       	adc	r25, r1
 248:	96 95       	lsr	r25
 24a:	87 95       	ror	r24
 24c:	97 f9       	bld	r25, 7
 24e:	08 95       	ret
 250:	e1 e0       	ldi	r30, 0x01	; 1
 252:	66 0f       	add	r22, r22
 254:	77 1f       	adc	r23, r23
 256:	88 1f       	adc	r24, r24
 258:	bb 1f       	adc	r27, r27
 25a:	62 17       	cp	r22, r18
 25c:	73 07       	cpc	r23, r19
 25e:	84 07       	cpc	r24, r20
 260:	ba 07       	cpc	r27, r26
 262:	20 f0       	brcs	.+8      	; 0x26c <__divsf3_pse+0xae>
 264:	62 1b       	sub	r22, r18
 266:	73 0b       	sbc	r23, r19
 268:	84 0b       	sbc	r24, r20
 26a:	ba 0b       	sbc	r27, r26
 26c:	ee 1f       	adc	r30, r30
 26e:	88 f7       	brcc	.-30     	; 0x252 <__divsf3_pse+0x94>
 270:	e0 95       	com	r30
 272:	08 95       	ret

00000274 <__floatunsisf>:
 274:	e8 94       	clt
 276:	09 c0       	rjmp	.+18     	; 0x28a <__floatsisf+0x12>

00000278 <__floatsisf>:
 278:	97 fb       	bst	r25, 7
 27a:	3e f4       	brtc	.+14     	; 0x28a <__floatsisf+0x12>
 27c:	90 95       	com	r25
 27e:	80 95       	com	r24
 280:	70 95       	com	r23
 282:	61 95       	neg	r22
 284:	7f 4f       	sbci	r23, 0xFF	; 255
 286:	8f 4f       	sbci	r24, 0xFF	; 255
 288:	9f 4f       	sbci	r25, 0xFF	; 255
 28a:	99 23       	and	r25, r25
 28c:	a9 f0       	breq	.+42     	; 0x2b8 <__floatsisf+0x40>
 28e:	f9 2f       	mov	r31, r25
 290:	96 e9       	ldi	r25, 0x96	; 150
 292:	bb 27       	eor	r27, r27
 294:	93 95       	inc	r25
 296:	f6 95       	lsr	r31
 298:	87 95       	ror	r24
 29a:	77 95       	ror	r23
 29c:	67 95       	ror	r22
 29e:	b7 95       	ror	r27
 2a0:	f1 11       	cpse	r31, r1
 2a2:	f8 cf       	rjmp	.-16     	; 0x294 <__floatsisf+0x1c>
 2a4:	fa f4       	brpl	.+62     	; 0x2e4 <__floatsisf+0x6c>
 2a6:	bb 0f       	add	r27, r27
 2a8:	11 f4       	brne	.+4      	; 0x2ae <__floatsisf+0x36>
 2aa:	60 ff       	sbrs	r22, 0
 2ac:	1b c0       	rjmp	.+54     	; 0x2e4 <__floatsisf+0x6c>
 2ae:	6f 5f       	subi	r22, 0xFF	; 255
 2b0:	7f 4f       	sbci	r23, 0xFF	; 255
 2b2:	8f 4f       	sbci	r24, 0xFF	; 255
 2b4:	9f 4f       	sbci	r25, 0xFF	; 255
 2b6:	16 c0       	rjmp	.+44     	; 0x2e4 <__floatsisf+0x6c>
 2b8:	88 23       	and	r24, r24
 2ba:	11 f0       	breq	.+4      	; 0x2c0 <__floatsisf+0x48>
 2bc:	96 e9       	ldi	r25, 0x96	; 150
 2be:	11 c0       	rjmp	.+34     	; 0x2e2 <__floatsisf+0x6a>
 2c0:	77 23       	and	r23, r23
 2c2:	21 f0       	breq	.+8      	; 0x2cc <__floatsisf+0x54>
 2c4:	9e e8       	ldi	r25, 0x8E	; 142
 2c6:	87 2f       	mov	r24, r23
 2c8:	76 2f       	mov	r23, r22
 2ca:	05 c0       	rjmp	.+10     	; 0x2d6 <__floatsisf+0x5e>
 2cc:	66 23       	and	r22, r22
 2ce:	71 f0       	breq	.+28     	; 0x2ec <__floatsisf+0x74>
 2d0:	96 e8       	ldi	r25, 0x86	; 134
 2d2:	86 2f       	mov	r24, r22
 2d4:	70 e0       	ldi	r23, 0x00	; 0
 2d6:	60 e0       	ldi	r22, 0x00	; 0
 2d8:	2a f0       	brmi	.+10     	; 0x2e4 <__floatsisf+0x6c>
 2da:	9a 95       	dec	r25
 2dc:	66 0f       	add	r22, r22
 2de:	77 1f       	adc	r23, r23
 2e0:	88 1f       	adc	r24, r24
 2e2:	da f7       	brpl	.-10     	; 0x2da <__floatsisf+0x62>
 2e4:	88 0f       	add	r24, r24
 2e6:	96 95       	lsr	r25
 2e8:	87 95       	ror	r24
 2ea:	97 f9       	bld	r25, 7
 2ec:	08 95       	ret

000002ee <__fp_cmp>:
 2ee:	99 0f       	add	r25, r25
 2f0:	00 08       	sbc	r0, r0
 2f2:	55 0f       	add	r21, r21
 2f4:	aa 0b       	sbc	r26, r26
 2f6:	e0 e8       	ldi	r30, 0x80	; 128
 2f8:	fe ef       	ldi	r31, 0xFE	; 254
 2fa:	16 16       	cp	r1, r22
 2fc:	17 06       	cpc	r1, r23
 2fe:	e8 07       	cpc	r30, r24
 300:	f9 07       	cpc	r31, r25
 302:	c0 f0       	brcs	.+48     	; 0x334 <__fp_cmp+0x46>
 304:	12 16       	cp	r1, r18
 306:	13 06       	cpc	r1, r19
 308:	e4 07       	cpc	r30, r20
 30a:	f5 07       	cpc	r31, r21
 30c:	98 f0       	brcs	.+38     	; 0x334 <__fp_cmp+0x46>
 30e:	62 1b       	sub	r22, r18
 310:	73 0b       	sbc	r23, r19
 312:	84 0b       	sbc	r24, r20
 314:	95 0b       	sbc	r25, r21
 316:	39 f4       	brne	.+14     	; 0x326 <__fp_cmp+0x38>
 318:	0a 26       	eor	r0, r26
 31a:	61 f0       	breq	.+24     	; 0x334 <__fp_cmp+0x46>
 31c:	23 2b       	or	r18, r19
 31e:	24 2b       	or	r18, r20
 320:	25 2b       	or	r18, r21
 322:	21 f4       	brne	.+8      	; 0x32c <__fp_cmp+0x3e>
 324:	08 95       	ret
 326:	0a 26       	eor	r0, r26
 328:	09 f4       	brne	.+2      	; 0x32c <__fp_cmp+0x3e>
 32a:	a1 40       	sbci	r26, 0x01	; 1
 32c:	a6 95       	lsr	r26
 32e:	8f ef       	ldi	r24, 0xFF	; 255
 330:	81 1d       	adc	r24, r1
 332:	81 1d       	adc	r24, r1
 334:	08 95       	ret

00000336 <__fp_inf>:
 336:	97 f9       	bld	r25, 7
 338:	9f 67       	ori	r25, 0x7F	; 127
 33a:	80 e8       	ldi	r24, 0x80	; 128
 33c:	70 e0       	ldi	r23, 0x00	; 0
 33e:	60 e0       	ldi	r22, 0x00	; 0
 340:	08 95       	ret

00000342 <__fp_nan>:
 342:	9f ef       	ldi	r25, 0xFF	; 255
 344:	80 ec       	ldi	r24, 0xC0	; 192
 346:	08 95       	ret

00000348 <__fp_pscA>:
 348:	00 24       	eor	r0, r0
 34a:	0a 94       	dec	r0
 34c:	16 16       	cp	r1, r22
 34e:	17 06       	cpc	r1, r23
 350:	18 06       	cpc	r1, r24
 352:	09 06       	cpc	r0, r25
 354:	08 95       	ret

00000356 <__fp_pscB>:
 356:	00 24       	eor	r0, r0
 358:	0a 94       	dec	r0
 35a:	12 16       	cp	r1, r18
 35c:	13 06       	cpc	r1, r19
 35e:	14 06       	cpc	r1, r20
 360:	05 06       	cpc	r0, r21
 362:	08 95       	ret

00000364 <__fp_round>:
 364:	09 2e       	mov	r0, r25
 366:	03 94       	inc	r0
 368:	00 0c       	add	r0, r0
 36a:	11 f4       	brne	.+4      	; 0x370 <__fp_round+0xc>
 36c:	88 23       	and	r24, r24
 36e:	52 f0       	brmi	.+20     	; 0x384 <__fp_round+0x20>
 370:	bb 0f       	add	r27, r27
 372:	40 f4       	brcc	.+16     	; 0x384 <__fp_round+0x20>
 374:	bf 2b       	or	r27, r31
 376:	11 f4       	brne	.+4      	; 0x37c <__fp_round+0x18>
 378:	60 ff       	sbrs	r22, 0
 37a:	04 c0       	rjmp	.+8      	; 0x384 <__fp_round+0x20>
 37c:	6f 5f       	subi	r22, 0xFF	; 255
 37e:	7f 4f       	sbci	r23, 0xFF	; 255
 380:	8f 4f       	sbci	r24, 0xFF	; 255
 382:	9f 4f       	sbci	r25, 0xFF	; 255
 384:	08 95       	ret

00000386 <__fp_split3>:
 386:	57 fd       	sbrc	r21, 7
 388:	90 58       	subi	r25, 0x80	; 128
 38a:	44 0f       	add	r20, r20
 38c:	55 1f       	adc	r21, r21
 38e:	59 f0       	breq	.+22     	; 0x3a6 <__fp_splitA+0x10>
 390:	5f 3f       	cpi	r21, 0xFF	; 255
 392:	71 f0       	breq	.+28     	; 0x3b0 <__fp_splitA+0x1a>
 394:	47 95       	ror	r20

00000396 <__fp_splitA>:
 396:	88 0f       	add	r24, r24
 398:	97 fb       	bst	r25, 7
 39a:	99 1f       	adc	r25, r25
 39c:	61 f0       	breq	.+24     	; 0x3b6 <__fp_splitA+0x20>
 39e:	9f 3f       	cpi	r25, 0xFF	; 255
 3a0:	79 f0       	breq	.+30     	; 0x3c0 <__fp_splitA+0x2a>
 3a2:	87 95       	ror	r24
 3a4:	08 95       	ret
 3a6:	12 16       	cp	r1, r18
 3a8:	13 06       	cpc	r1, r19
 3aa:	14 06       	cpc	r1, r20
 3ac:	55 1f       	adc	r21, r21
 3ae:	f2 cf       	rjmp	.-28     	; 0x394 <__fp_split3+0xe>
 3b0:	46 95       	lsr	r20
 3b2:	f1 df       	rcall	.-30     	; 0x396 <__fp_splitA>
 3b4:	08 c0       	rjmp	.+16     	; 0x3c6 <__fp_splitA+0x30>
 3b6:	16 16       	cp	r1, r22
 3b8:	17 06       	cpc	r1, r23
 3ba:	18 06       	cpc	r1, r24
 3bc:	99 1f       	adc	r25, r25
 3be:	f1 cf       	rjmp	.-30     	; 0x3a2 <__fp_splitA+0xc>
 3c0:	86 95       	lsr	r24
 3c2:	71 05       	cpc	r23, r1
 3c4:	61 05       	cpc	r22, r1
 3c6:	08 94       	sec
 3c8:	08 95       	ret

000003ca <__fp_zero>:
 3ca:	e8 94       	clt

000003cc <__fp_szero>:
 3cc:	bb 27       	eor	r27, r27
 3ce:	66 27       	eor	r22, r22
 3d0:	77 27       	eor	r23, r23
 3d2:	cb 01       	movw	r24, r22
 3d4:	97 f9       	bld	r25, 7
 3d6:	08 95       	ret

000003d8 <_exit>:
 3d8:	f8 94       	cli

000003da <__stop_program>:
 3da:	ff cf       	rjmp	.-2      	; 0x3da <__stop_program>
