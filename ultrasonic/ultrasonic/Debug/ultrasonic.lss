
ultrasonic.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  00000244  000002d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000244  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  0080010a  0080010a  000002e2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002e2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000314  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  00000354  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000009c7  00000000  00000000  0000038c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000074b  00000000  00000000  00000d53  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003fd  00000000  00000000  0000149e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000078  00000000  00000000  0000189c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000402  00000000  00000000  00001914  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000297  00000000  00000000  00001d16  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  00001fad  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__vector_13>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 e4       	ldi	r30, 0x44	; 68
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 30       	cpi	r26, 0x0A	; 10
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	aa e0       	ldi	r26, 0x0A	; 10
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ac 30       	cpi	r26, 0x0C	; 12
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 90 00 	call	0x120	; 0x120 <main>
  9e:	0c 94 20 01 	jmp	0x240	; 0x240 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <__vector_13>:
#define Trigger_pin PORTB1 /* Trigger pin */

int TimerOverflow = 0;

ISR(TIMER1_OVF_vect)
{
  a6:	1f 92       	push	r1
  a8:	0f 92       	push	r0
  aa:	0f b6       	in	r0, 0x3f	; 63
  ac:	0f 92       	push	r0
  ae:	11 24       	eor	r1, r1
  b0:	8f 93       	push	r24
  b2:	9f 93       	push	r25
	TimerOverflow++; /* Increment Timer Overflow count */
  b4:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
  b8:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <__data_end+0x1>
  bc:	01 96       	adiw	r24, 0x01	; 1
  be:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <__data_end+0x1>
  c2:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
}
  c6:	9f 91       	pop	r25
  c8:	8f 91       	pop	r24
  ca:	0f 90       	pop	r0
  cc:	0f be       	out	0x3f, r0	; 63
  ce:	0f 90       	pop	r0
  d0:	1f 90       	pop	r1
  d2:	18 95       	reti

000000d4 <sendCommand>:

void sendCommand(unsigned char command)
{
	CTRL_PORT &= ~(1 << RW) & ~(1 << RS);  // set RS to 0 to send command
  d4:	98 b1       	in	r25, 0x08	; 8
  d6:	9c 7f       	andi	r25, 0xFC	; 252
  d8:	98 b9       	out	0x08, r25	; 8
	DATA_PORT = command;
  da:	8b b9       	out	0x0b, r24	; 11
	CTRL_PORT |= (1 << E); // send short pulse to finish transfer
  dc:	42 9a       	sbi	0x08, 2	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  de:	8f ec       	ldi	r24, 0xCF	; 207
  e0:	97 e0       	ldi	r25, 0x07	; 7
  e2:	01 97       	sbiw	r24, 0x01	; 1
  e4:	f1 f7       	brne	.-4      	; 0xe2 <sendCommand+0xe>
  e6:	00 c0       	rjmp	.+0      	; 0xe8 <sendCommand+0x14>
  e8:	00 00       	nop
	_delay_ms(1);
	CTRL_PORT &= ~(1 << E);
  ea:	42 98       	cbi	0x08, 2	; 8
  ec:	8f ec       	ldi	r24, 0xCF	; 207
  ee:	97 e0       	ldi	r25, 0x07	; 7
  f0:	01 97       	sbiw	r24, 0x01	; 1
  f2:	f1 f7       	brne	.-4      	; 0xf0 <sendCommand+0x1c>
  f4:	00 c0       	rjmp	.+0      	; 0xf6 <sendCommand+0x22>
  f6:	00 00       	nop
  f8:	08 95       	ret

000000fa <sendData>:
	_delay_ms(1);
}

void sendData(unsigned char data)
{
	CTRL_PORT &= ~(1 << RW);
  fa:	40 98       	cbi	0x08, 0	; 8
	CTRL_PORT |= (1 << RS);	// set RS to 1 to send data
  fc:	41 9a       	sbi	0x08, 1	; 8
	DATA_PORT = data;
  fe:	8b b9       	out	0x0b, r24	; 11
	CTRL_PORT |= (1 << E); // send short pulse to finish transfer
 100:	42 9a       	sbi	0x08, 2	; 8
 102:	8f ec       	ldi	r24, 0xCF	; 207
 104:	97 e0       	ldi	r25, 0x07	; 7
 106:	01 97       	sbiw	r24, 0x01	; 1
 108:	f1 f7       	brne	.-4      	; 0x106 <sendData+0xc>
 10a:	00 c0       	rjmp	.+0      	; 0x10c <sendData+0x12>
 10c:	00 00       	nop
	_delay_ms(1);
	CTRL_PORT &= ~(1 << E);
 10e:	42 98       	cbi	0x08, 2	; 8
 110:	8f ec       	ldi	r24, 0xCF	; 207
 112:	97 e0       	ldi	r25, 0x07	; 7
 114:	01 97       	sbiw	r24, 0x01	; 1
 116:	f1 f7       	brne	.-4      	; 0x114 <sendData+0x1a>
 118:	00 c0       	rjmp	.+0      	; 0x11a <sendData+0x20>
 11a:	00 00       	nop
	_delay_ms(1);
	CTRL_PORT &= ~(1 << RS);
 11c:	41 98       	cbi	0x08, 1	; 8
 11e:	08 95       	ret

00000120 <main>:
}

int main(void)
{
 120:	cf 93       	push	r28
 122:	df 93       	push	r29
 124:	cd b7       	in	r28, 0x3d	; 61
 126:	de b7       	in	r29, 0x3e	; 62
 128:	2a 97       	sbiw	r28, 0x0a	; 10
 12a:	0f b6       	in	r0, 0x3f	; 63
 12c:	f8 94       	cli
 12e:	de bf       	out	0x3e, r29	; 62
 130:	0f be       	out	0x3f, r0	; 63
 132:	cd bf       	out	0x3d, r28	; 61
	double distance;
	long count;
	
	// initialize LCD
	CTRL_DDR |= (1 << RW) | (1 << RS) | (1 << E);
 134:	87 b1       	in	r24, 0x07	; 7
 136:	87 60       	ori	r24, 0x07	; 7
 138:	87 b9       	out	0x07, r24	; 7
	CTRL_PORT &= ~(1 << RW) & ~(1 << RS) & ~(1 << E);
 13a:	88 b1       	in	r24, 0x08	; 8
 13c:	88 7f       	andi	r24, 0xF8	; 248
 13e:	88 b9       	out	0x08, r24	; 8
	DATA_DDR = 0xFF;
 140:	8f ef       	ldi	r24, 0xFF	; 255
 142:	8a b9       	out	0x0a, r24	; 10
	DATA_PORT = 0;
 144:	1b b8       	out	0x0b, r1	; 11
	
	DDRB |= (1<<PORTB1);
 146:	21 9a       	sbi	0x04, 1	; 4
	PORTB |= (1<<PORTB0);
 148:	28 9a       	sbi	0x05, 0	; 5

	sei();                /* Enable global interrupt */
 14a:	78 94       	sei
	EIMSK = (1 << TOIE1); /* Enable Timer1 overflow interrupts */
 14c:	81 e0       	ldi	r24, 0x01	; 1
 14e:	8d bb       	out	0x1d, r24	; 29
	TCCR1A = 0;           /* Set all bit to zero Normal operation */
 150:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
	
	sendCommand(0x38);
 154:	88 e3       	ldi	r24, 0x38	; 56
 156:	0e 94 6a 00 	call	0xd4	; 0xd4 <sendCommand>
	sendCommand(0x0E);
 15a:	8e e0       	ldi	r24, 0x0E	; 14
 15c:	0e 94 6a 00 	call	0xd4	; 0xd4 <sendCommand>
	sendCommand(0x01);  // clear screen
 160:	81 e0       	ldi	r24, 0x01	; 1
 162:	0e 94 6a 00 	call	0xd4	; 0xd4 <sendCommand>
	sendCommand(0x06);	// shift cursor to right
 166:	86 e0       	ldi	r24, 0x06	; 6
 168:	0e 94 6a 00 	call	0xd4	; 0xd4 <sendCommand>
	sendCommand(0x80);	// set cursor to first character on line 1
 16c:	80 e8       	ldi	r24, 0x80	; 128
 16e:	0e 94 6a 00 	call	0xd4	; 0xd4 <sendCommand>
		/* Give 10us trigger pulse on trig. pin to HC-SR04 */
		PORTB |= (1 << Trigger_pin);
		_delay_us(10);
		PORTB &= (~(1 << Trigger_pin));

		TCNT1 = 0;         /* Clear Timer counter */
 172:	0f 2e       	mov	r0, r31
 174:	f4 e8       	ldi	r31, 0x84	; 132
 176:	8f 2e       	mov	r8, r31
 178:	91 2c       	mov	r9, r1
 17a:	f0 2d       	mov	r31, r0
		TCCR1B = 0x41;     /* Capture on rising edge, No prescaler*/
 17c:	0f 2e       	mov	r0, r31
 17e:	f1 e8       	ldi	r31, 0x81	; 129
 180:	af 2e       	mov	r10, r31
 182:	b1 2c       	mov	r11, r1
 184:	f0 2d       	mov	r31, r0
 186:	0f 2e       	mov	r0, r31
 188:	f1 e4       	ldi	r31, 0x41	; 65
 18a:	4f 2e       	mov	r4, r31
 18c:	f0 2d       	mov	r31, r0
		TIFR0 = 1 << ICF1; /* Clear ICP flag (Input Capture flag) */
 18e:	68 94       	set
 190:	55 24       	eor	r5, r5
 192:	55 f8       	bld	r5, 5
		TIFR0 = 1 << TOV1; /* Clear Timer Overflow flag */
		TimerOverflow = 0; /* Clear Timer overflow count */

		while ((TIFR0 & (1 << ICF1)) == 0)
		;                                   /* Wait for falling edge */
		count = ICR1 + (65535 * TimerOverflow); /* Take count */
 194:	0f 2e       	mov	r0, r31
 196:	f6 e8       	ldi	r31, 0x86	; 134
 198:	6f 2e       	mov	r6, r31
 19a:	71 2c       	mov	r7, r1
 19c:	f0 2d       	mov	r31, r0
		/* 8MHz Timer freq, sound speed =343 m/s */
		distance = (double)count / 466.47;
		
		
		char buffer[] = "naranahee";
 19e:	ce 01       	movw	r24, r28
 1a0:	01 96       	adiw	r24, 0x01	; 1
 1a2:	7c 01       	movw	r14, r24
	sendCommand(0x06);	// shift cursor to right
	sendCommand(0x80);	// set cursor to first character on line 1
	
	while (1)
	{
		sendCommand(0x01);
 1a4:	81 e0       	ldi	r24, 0x01	; 1
 1a6:	0e 94 6a 00 	call	0xd4	; 0xd4 <sendCommand>
		sendCommand(0x80);
 1aa:	80 e8       	ldi	r24, 0x80	; 128
 1ac:	0e 94 6a 00 	call	0xd4	; 0xd4 <sendCommand>
		
		int i=0;
		
		/* Give 10us trigger pulse on trig. pin to HC-SR04 */
		PORTB |= (1 << Trigger_pin);
 1b0:	29 9a       	sbi	0x05, 1	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1b2:	9a e1       	ldi	r25, 0x1A	; 26
 1b4:	9a 95       	dec	r25
 1b6:	f1 f7       	brne	.-4      	; 0x1b4 <main+0x94>
 1b8:	00 c0       	rjmp	.+0      	; 0x1ba <main+0x9a>
		_delay_us(10);
		PORTB &= (~(1 << Trigger_pin));
 1ba:	29 98       	cbi	0x05, 1	; 5

		TCNT1 = 0;         /* Clear Timer counter */
 1bc:	f4 01       	movw	r30, r8
 1be:	11 82       	std	Z+1, r1	; 0x01
 1c0:	10 82       	st	Z, r1
		TCCR1B = 0x41;     /* Capture on rising edge, No prescaler*/
 1c2:	f5 01       	movw	r30, r10
 1c4:	40 82       	st	Z, r4
		TIFR0 = 1 << ICF1; /* Clear ICP flag (Input Capture flag) */
 1c6:	55 ba       	out	0x15, r5	; 21
		TIFR0 = 1 << TOV1; /* Clear Timer Overflow flag */
 1c8:	81 e0       	ldi	r24, 0x01	; 1
 1ca:	85 bb       	out	0x15, r24	; 21

		/*Calculate width of Echo by Input Capture (ICP) */

		while ((TIFR0 & (1 << ICF1)) == 0)
 1cc:	ad 9b       	sbis	0x15, 5	; 21
 1ce:	fe cf       	rjmp	.-4      	; 0x1cc <main+0xac>
		;              /* Wait for rising edge */
		TCNT1 = 0;         /* Clear Timer counter */
 1d0:	f4 01       	movw	r30, r8
 1d2:	11 82       	std	Z+1, r1	; 0x01
 1d4:	10 82       	st	Z, r1
		TCCR1B = 0x01;     /* Capture on falling edge, No prescaler */
 1d6:	81 e0       	ldi	r24, 0x01	; 1
 1d8:	f5 01       	movw	r30, r10
 1da:	80 83       	st	Z, r24
		TIFR0 = 1 << ICF1; /* Clear ICP flag (Input Capture flag) */
 1dc:	55 ba       	out	0x15, r5	; 21
		TIFR0 = 1 << TOV1; /* Clear Timer Overflow flag */
 1de:	85 bb       	out	0x15, r24	; 21
		TimerOverflow = 0; /* Clear Timer overflow count */
 1e0:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <__data_end+0x1>
 1e4:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <__data_end>

		while ((TIFR0 & (1 << ICF1)) == 0)
 1e8:	ad 9b       	sbis	0x15, 5	; 21
 1ea:	fe cf       	rjmp	.-4      	; 0x1e8 <main+0xc8>
		;                                   /* Wait for falling edge */
		count = ICR1 + (65535 * TimerOverflow); /* Take count */
 1ec:	f3 01       	movw	r30, r6
 1ee:	80 81       	ld	r24, Z
 1f0:	91 81       	ldd	r25, Z+1	; 0x01
		/* 8MHz Timer freq, sound speed =343 m/s */
		distance = (double)count / 466.47;
		
		
		char buffer[] = "naranahee";
 1f2:	8a e0       	ldi	r24, 0x0A	; 10
 1f4:	e0 e0       	ldi	r30, 0x00	; 0
 1f6:	f1 e0       	ldi	r31, 0x01	; 1
 1f8:	d7 01       	movw	r26, r14
 1fa:	01 90       	ld	r0, Z+
 1fc:	0d 92       	st	X+, r0
 1fe:	8a 95       	dec	r24
 200:	e1 f7       	brne	.-8      	; 0x1fa <main+0xda>
 202:	67 01       	movw	r12, r14
		for (i=0; i<strlen(buffer); i++)
 204:	00 e0       	ldi	r16, 0x00	; 0
 206:	10 e0       	ldi	r17, 0x00	; 0
 208:	07 c0       	rjmp	.+14     	; 0x218 <main+0xf8>
		{
			sendData(buffer[i]);
 20a:	f6 01       	movw	r30, r12
 20c:	81 91       	ld	r24, Z+
 20e:	6f 01       	movw	r12, r30
 210:	0e 94 7d 00 	call	0xfa	; 0xfa <sendData>
		/* 8MHz Timer freq, sound speed =343 m/s */
		distance = (double)count / 466.47;
		
		
		char buffer[] = "naranahee";
		for (i=0; i<strlen(buffer); i++)
 214:	0f 5f       	subi	r16, 0xFF	; 255
 216:	1f 4f       	sbci	r17, 0xFF	; 255
 218:	f7 01       	movw	r30, r14
 21a:	01 90       	ld	r0, Z+
 21c:	00 20       	and	r0, r0
 21e:	e9 f7       	brne	.-6      	; 0x21a <main+0xfa>
 220:	31 97       	sbiw	r30, 0x01	; 1
 222:	ee 19       	sub	r30, r14
 224:	ff 09       	sbc	r31, r15
 226:	0e 17       	cp	r16, r30
 228:	1f 07       	cpc	r17, r31
 22a:	78 f3       	brcs	.-34     	; 0x20a <main+0xea>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 22c:	ff e7       	ldi	r31, 0x7F	; 127
 22e:	2a e1       	ldi	r18, 0x1A	; 26
 230:	86 e0       	ldi	r24, 0x06	; 6
 232:	f1 50       	subi	r31, 0x01	; 1
 234:	20 40       	sbci	r18, 0x00	; 0
 236:	80 40       	sbci	r24, 0x00	; 0
 238:	e1 f7       	brne	.-8      	; 0x232 <main+0x112>
 23a:	00 c0       	rjmp	.+0      	; 0x23c <main+0x11c>
 23c:	00 00       	nop
		{
			sendData(buffer[i]);
		}
		
		_delay_ms(250);
	}
 23e:	b2 cf       	rjmp	.-156    	; 0x1a4 <main+0x84>

00000240 <_exit>:
 240:	f8 94       	cli

00000242 <__stop_program>:
 242:	ff cf       	rjmp	.-2      	; 0x242 <__stop_program>
